var _mdgriffith$stylish_elephants$Internal_Model$locationClass = function (location) {
	var _p0 = location;
	switch (_p0.ctor) {
		case 'Above':
			return 'se el above';
		case 'Below':
			return 'se el below';
		case 'OnRight':
			return 'se el on-right';
		case 'OnLeft':
			return 'se el on-left';
		case 'InFront':
			return 'se el infront';
		default:
			return 'se el behind';
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$isInt = function (x) {
	return x;
};
var _mdgriffith$stylish_elephants$Internal_Model$psuedoClassName = function ($class) {
	var _p1 = $class;
	switch (_p1.ctor) {
		case 'Focus':
			return 'focus';
		case 'Hover':
			return 'hover';
		default:
			return 'active';
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$styleKey = function (style) {
	var _p2 = style;
	switch (_p2.ctor) {
		case 'Shadows':
			return 'shadows';
		case 'Transparency':
			return 'transparency';
		case 'Style':
			return _p2._0;
		case 'FontSize':
			return 'fontsize';
		case 'FontFamily':
			return 'fontfamily';
		case 'Single':
			return _p2._1;
		case 'LineHeight':
			return 'lineheight';
		case 'Colored':
			return _p2._1;
		case 'SpacingStyle':
			return 'spacing';
		case 'PaddingStyle':
			return 'padding';
		case 'GridTemplateStyle':
			return 'grid-template';
		case 'GridPosition':
			return 'grid-position';
		case 'PseudoSelector':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_mdgriffith$stylish_elephants$Internal_Model$psuedoClassName(_p2._0),
				A2(
					_elm_lang$core$String$join,
					'',
					A2(_elm_lang$core$List$map, _mdgriffith$stylish_elephants$Internal_Model$styleKey, _p2._1)));
		default:
			return 'transform';
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$intToString = function (i) {
	var _p3 = i;
	switch (_p3) {
		case 0:
			return '0';
		case 1:
			return '1';
		case 2:
			return '2';
		case 3:
			return '3';
		case 4:
			return '4';
		case 5:
			return '5';
		case 100:
			return '100';
		case 255:
			return '255';
		default:
			return _elm_lang$core$Basics$toString(i);
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$formatColor = function (color) {
	var _p4 = _elm_lang$core$Color$toRgb(color);
	var red = _p4.red;
	var green = _p4.green;
	var blue = _p4.blue;
	var alpha = _p4.alpha;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		A2(
			_elm_lang$core$Basics_ops['++'],
			'rgba(',
			_mdgriffith$stylish_elephants$Internal_Model$intToString(red)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(
				_elm_lang$core$Basics_ops['++'],
				',',
				_mdgriffith$stylish_elephants$Internal_Model$intToString(green)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$Basics_ops['++'],
					',',
					_mdgriffith$stylish_elephants$Internal_Model$intToString(blue)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					',',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(alpha),
						')')))));
};
var _mdgriffith$stylish_elephants$Internal_Model$floatClass = function (x) {
	return _mdgriffith$stylish_elephants$Internal_Model$intToString(
		_elm_lang$core$Basics$round(x * 100));
};
var _mdgriffith$stylish_elephants$Internal_Model$formatColorClass = function (color) {
	var _p5 = _elm_lang$core$Color$toRgb(color);
	var red = _p5.red;
	var green = _p5.green;
	var blue = _p5.blue;
	var alpha = _p5.alpha;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_mdgriffith$stylish_elephants$Internal_Model$intToString(red),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'-',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_mdgriffith$stylish_elephants$Internal_Model$intToString(green),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'-',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_mdgriffith$stylish_elephants$Internal_Model$intToString(blue),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'-',
							_mdgriffith$stylish_elephants$Internal_Model$floatClass(alpha)))))));
};
var _mdgriffith$stylish_elephants$Internal_Model$formatBoxShadow = function (shadow) {
	return A2(
		_elm_lang$core$String$join,
		' ',
		A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			{
				ctor: '::',
				_0: shadow.inset ? _elm_lang$core$Maybe$Just('inset') : _elm_lang$core$Maybe$Nothing,
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Maybe$Just(
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(
								_elm_lang$core$Tuple$first(shadow.offset)),
							'px')),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Maybe$Just(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(
									_elm_lang$core$Tuple$second(shadow.offset)),
								'px')),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Maybe$Just(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(shadow.blur),
									'px')),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Maybe$Just(
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(shadow.size),
										'px')),
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Maybe$Just(
										_mdgriffith$stylish_elephants$Internal_Model$formatColor(shadow.color)),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}));
};
var _mdgriffith$stylish_elephants$Internal_Model$formatTextShadow = function (shadow) {
	return A2(
		_elm_lang$core$String$join,
		' ',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(
					_elm_lang$core$Tuple$first(shadow.offset)),
				'px'),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(
						_elm_lang$core$Tuple$second(shadow.offset)),
					'px'),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(shadow.blur),
						'px'),
					_1: {
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Internal_Model$formatColor(shadow.color),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _mdgriffith$stylish_elephants$Internal_Model$formatDropShadow = function (shadow) {
	return A2(
		_elm_lang$core$String$join,
		' ',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(
					_elm_lang$core$Tuple$first(shadow.offset)),
				'px'),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(
						_elm_lang$core$Tuple$second(shadow.offset)),
					'px'),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(shadow.blur),
						'px'),
					_1: {
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Internal_Model$formatColor(shadow.color),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _mdgriffith$stylish_elephants$Internal_Model$filterName = function (filtr) {
	var _p6 = filtr;
	switch (_p6.ctor) {
		case 'FilterUrl':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'url(',
				A2(_elm_lang$core$Basics_ops['++'], _p6._0, ')'));
		case 'Blur':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'blur(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p6._0),
					'px)'));
		case 'Brightness':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'brightness(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p6._0),
					'%)'));
		case 'Contrast':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'contrast(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p6._0),
					'%)'));
		case 'Grayscale':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'grayscale(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p6._0),
					'%)'));
		case 'HueRotate':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'hueRotate(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p6._0),
					'deg)'));
		case 'Invert':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'invert(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p6._0),
					'%)'));
		case 'OpacityFilter':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'opacity(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p6._0),
					'%)'));
		case 'Saturate':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'saturate(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p6._0),
					'%)'));
		case 'Sepia':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'sepia(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p6._0),
					'%)'));
		default:
			var _p7 = _p6._0;
			var shadowModel = {offset: _p7.offset, size: _p7.size, blur: _p7.blur, color: _p7.color};
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'drop-shadow(',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_mdgriffith$stylish_elephants$Internal_Model$formatDropShadow(shadowModel),
					')'));
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$lengthClassName = function (x) {
	var _p8 = x;
	switch (_p8.ctor) {
		case 'Px':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_mdgriffith$stylish_elephants$Internal_Model$intToString(_p8._0),
				'px');
		case 'Content':
			return 'auto';
		case 'Fill':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_mdgriffith$stylish_elephants$Internal_Model$intToString(_p8._0),
				'fr');
		default:
			var _p11 = _p8._0;
			var renderedMax = function () {
				var _p9 = _p11.max;
				if (_p9.ctor === 'Nothing') {
					return '';
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'-',
						_mdgriffith$stylish_elephants$Internal_Model$intToString(_p9._0));
				}
			}();
			var renderedMin = function () {
				var _p10 = _p11.min;
				if (_p10.ctor === 'Nothing') {
					return '';
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						'-',
						_mdgriffith$stylish_elephants$Internal_Model$intToString(_p10._0));
				}
			}();
			return A2(
				_elm_lang$core$Basics_ops['++'],
				_mdgriffith$stylish_elephants$Internal_Model$intToString(_p11.portion),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'fr',
					A2(_elm_lang$core$Basics_ops['++'], renderedMin, renderedMax)));
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$getStyleName = function (style) {
	var _p12 = style;
	switch (_p12.ctor) {
		case 'Shadows':
			return _p12._0;
		case 'Transparency':
			return _p12._0;
		case 'Style':
			return _p12._0;
		case 'LineHeight':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'line-height-',
				_mdgriffith$stylish_elephants$Internal_Model$floatClass(_p12._0));
		case 'FontFamily':
			return _p12._0;
		case 'FontSize':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'font-size-',
				_elm_lang$core$Basics$toString(
					_mdgriffith$stylish_elephants$Internal_Model$isInt(_p12._0)));
		case 'Single':
			return _p12._0;
		case 'Colored':
			return _p12._0;
		case 'SpacingStyle':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'spacing-',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(
						_mdgriffith$stylish_elephants$Internal_Model$isInt(_p12._0)),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'-',
						_elm_lang$core$Basics$toString(
							_mdgriffith$stylish_elephants$Internal_Model$isInt(_p12._1)))));
		case 'PaddingStyle':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'pad-',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p12._0),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'-',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p12._1),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'-',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p12._2),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'-',
										_elm_lang$core$Basics$toString(_p12._3))))))));
		case 'GridTemplateStyle':
			var _p13 = _p12._0;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'grid-rows-',
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$String$join,
						'-',
						A2(_elm_lang$core$List$map, _mdgriffith$stylish_elephants$Internal_Model$lengthClassName, _p13.rows)),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'-cols-',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$String$join,
								'-',
								A2(_elm_lang$core$List$map, _mdgriffith$stylish_elephants$Internal_Model$lengthClassName, _p13.columns)),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'-space-x-',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_mdgriffith$stylish_elephants$Internal_Model$lengthClassName(
										_elm_lang$core$Tuple$first(_p13.spacing)),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'-space-y-',
										_mdgriffith$stylish_elephants$Internal_Model$lengthClassName(
											_elm_lang$core$Tuple$second(_p13.spacing)))))))));
		case 'GridPosition':
			var _p14 = _p12._0;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'grid-pos-',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(_p14.row),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'-',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p14.col),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'-',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p14.width),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'-',
										_elm_lang$core$Basics$toString(_p14.height))))))));
		case 'PseudoSelector':
			return A2(
				_elm_lang$core$String$join,
				' ',
				{
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Internal_Model$psuedoClassName(_p12._0),
					_1: A2(_elm_lang$core$List$map, _mdgriffith$stylish_elephants$Internal_Model$getStyleName, _p12._1)
				});
		default:
			return 'transformation';
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$reduceStyles = F2(
	function (style, _p15) {
		var _p16 = _p15;
		var _p18 = _p16._1;
		var _p17 = _p16._0;
		var styleName = _mdgriffith$stylish_elephants$Internal_Model$getStyleName(style);
		return A2(_elm_lang$core$Set$member, styleName, _p17) ? {ctor: '_Tuple2', _0: _p17, _1: _p18} : {
			ctor: '_Tuple2',
			_0: A2(_elm_lang$core$Set$insert, styleName, _p17),
			_1: {ctor: '::', _0: style, _1: _p18}
		};
	});
var _mdgriffith$stylish_elephants$Internal_Model$renderFont = function (families) {
	var fontName = function (font) {
		var _p19 = font;
		switch (_p19.ctor) {
			case 'Serif':
				return 'serif';
			case 'SansSerif':
				return 'sans-serif';
			case 'Monospace':
				return 'monospace';
			case 'Typeface':
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'\"',
					A2(_elm_lang$core$Basics_ops['++'], _p19._0, '\"'));
			default:
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'\"',
					A2(_elm_lang$core$Basics_ops['++'], _p19._0, '\"'));
		}
	};
	return A2(
		_elm_lang$core$String$join,
		', ',
		A2(_elm_lang$core$List$map, fontName, families));
};
var _mdgriffith$stylish_elephants$Internal_Model$focusDefaultStyle = {
	backgroundColor: _elm_lang$core$Maybe$Nothing,
	borderColor: _elm_lang$core$Maybe$Nothing,
	shadow: _elm_lang$core$Maybe$Just(
		{
			color: A3(_elm_lang$core$Color$rgb, 155, 203, 255),
			offset: {ctor: '_Tuple2', _0: 0, _1: 0},
			blur: 3,
			size: 3
		})
};
var _mdgriffith$stylish_elephants$Internal_Model$renderFontClassName = F2(
	function (font, current) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			current,
			function () {
				var _p20 = font;
				switch (_p20.ctor) {
					case 'Serif':
						return 'serif';
					case 'SansSerif':
						return 'sans-serif';
					case 'Monospace':
						return 'monospace';
					case 'Typeface':
						return A2(
							_elm_lang$core$String$join,
							'-',
							_elm_lang$core$String$words(
								_elm_lang$core$String$toLower(_p20._0)));
					default:
						return A2(
							_elm_lang$core$String$join,
							'-',
							_elm_lang$core$String$words(
								_elm_lang$core$String$toLower(_p20._0)));
				}
			}());
	});
var _mdgriffith$stylish_elephants$Internal_Model$textElementFill = function (str) {
	return A3(
		_elm_lang$virtual_dom$VirtualDom$node,
		'div',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$virtual_dom$VirtualDom$property,
				'className',
				_elm_lang$core$Json_Encode$string('se text width-fill height-fill')),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom$text(str),
			_1: {ctor: '[]'}
		});
};
var _mdgriffith$stylish_elephants$Internal_Model$textElement = function (str) {
	return A3(
		_elm_lang$virtual_dom$VirtualDom$node,
		'div',
		{
			ctor: '::',
			_0: A2(
				_elm_lang$virtual_dom$VirtualDom$property,
				'className',
				_elm_lang$core$Json_Encode$string('se text width-content height-content')),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$virtual_dom$VirtualDom$text(str),
			_1: {ctor: '[]'}
		});
};
var _mdgriffith$stylish_elephants$Internal_Model$getSpacing = F2(
	function (attrs, $default) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			$default,
			A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, acc) {
						var _p21 = acc;
						if (_p21.ctor === 'Just') {
							return _elm_lang$core$Maybe$Just(_p21._0);
						} else {
							var _p22 = x;
							if ((_p22.ctor === 'StyleClass') && (_p22._0.ctor === 'SpacingStyle')) {
								return _elm_lang$core$Maybe$Just(
									{ctor: '_Tuple2', _0: _p22._0._0, _1: _p22._0._1});
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						}
					}),
				_elm_lang$core$Maybe$Nothing,
				attrs));
	});
var _mdgriffith$stylish_elephants$Internal_Model$filter = function (attrs) {
	return _elm_lang$core$Tuple$first(
		A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, _p23) {
					var _p24 = _p23;
					var _p27 = _p24._1;
					var _p26 = _p24._0;
					var _p25 = x;
					switch (_p25.ctor) {
						case 'NoAttribute':
							return {ctor: '_Tuple2', _0: _p26, _1: _p27};
						case 'Class':
							return {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: _p27
							};
						case 'Attr':
							return {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: _p27
							};
						case 'StyleClass':
							return {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: _p27
							};
						case 'Width':
							return A2(_elm_lang$core$Set$member, 'width', _p27) ? {ctor: '_Tuple2', _0: _p26, _1: _p27} : {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: A2(_elm_lang$core$Set$insert, 'width', _p27)
							};
						case 'Height':
							return A2(_elm_lang$core$Set$member, 'height', _p27) ? {ctor: '_Tuple2', _0: _p26, _1: _p27} : {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: A2(_elm_lang$core$Set$insert, 'height', _p27)
							};
						case 'Describe':
							return A2(_elm_lang$core$Set$member, 'described', _p27) ? {ctor: '_Tuple2', _0: _p26, _1: _p27} : {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: A2(_elm_lang$core$Set$insert, 'described', _p27)
							};
						case 'Nearby':
							return {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: _p27
							};
						case 'AlignX':
							return A2(_elm_lang$core$Set$member, 'align-x', _p27) ? {ctor: '_Tuple2', _0: _p26, _1: _p27} : {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: A2(_elm_lang$core$Set$insert, 'align-x', _p27)
							};
						case 'AlignY':
							return A2(_elm_lang$core$Set$member, 'align-y', _p27) ? {ctor: '_Tuple2', _0: _p26, _1: _p27} : {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: A2(_elm_lang$core$Set$insert, 'align-y', _p27)
							};
						case 'Filter':
							return {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: _p27
							};
						case 'BoxShadow':
							return {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: _p27
							};
						default:
							return {
								ctor: '_Tuple2',
								_0: {ctor: '::', _0: x, _1: _p26},
								_1: _p27
							};
					}
				}),
			{
				ctor: '_Tuple2',
				_0: {ctor: '[]'},
				_1: _elm_lang$core$Set$empty
			},
			attrs));
};
var _mdgriffith$stylish_elephants$Internal_Model$get = F2(
	function (attrs, isAttr) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, found) {
					return isAttr(x) ? {ctor: '::', _0: x, _1: found} : found;
				}),
			{ctor: '[]'},
			_mdgriffith$stylish_elephants$Internal_Model$filter(attrs));
	});
var _mdgriffith$stylish_elephants$Internal_Model$uncapitalize = function (str) {
	var tail = A2(_elm_lang$core$String$dropLeft, 1, str);
	var head = _elm_lang$core$String$toLower(
		A2(_elm_lang$core$String$left, 1, str));
	return A2(_elm_lang$core$Basics_ops['++'], head, tail);
};
var _mdgriffith$stylish_elephants$Internal_Model$className = function (x) {
	return A4(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('[\\s+]'),
		function (_p28) {
			return '';
		},
		A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex('[A-Z0-9]+'),
			function (_p29) {
				var _p30 = _p29;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					_elm_lang$core$String$toLower(_p30.match));
			},
			A4(
				_elm_lang$core$Regex$replace,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('[^a-zA-Z0-9_-]'),
				function (_p31) {
					return '';
				},
				_mdgriffith$stylish_elephants$Internal_Model$uncapitalize(x))));
};
var _mdgriffith$stylish_elephants$Internal_Model$floorAtZero = function (x) {
	return (_elm_lang$core$Native_Utils.cmp(x, 0) > 0) ? x : 0;
};
var _mdgriffith$stylish_elephants$Internal_Model$emptyTransformGroup = {translate: _elm_lang$core$Maybe$Nothing, rotate: _elm_lang$core$Maybe$Nothing, scale: _elm_lang$core$Maybe$Nothing};
var _mdgriffith$stylish_elephants$Internal_Model$emptyTransformationStates = {focus: _elm_lang$core$Maybe$Nothing, hover: _elm_lang$core$Maybe$Nothing, normal: _elm_lang$core$Maybe$Nothing, active: _elm_lang$core$Maybe$Nothing};
var _mdgriffith$stylish_elephants$Internal_Model$addIfNothing = F2(
	function (val, existing) {
		var _p32 = existing;
		if (_p32.ctor === 'Nothing') {
			return val;
		} else {
			return _p32;
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$stackTransforms = F2(
	function (transform, group) {
		var _p33 = transform;
		switch (_p33.ctor) {
			case 'Move':
				var _p37 = _p33._2;
				var _p36 = _p33._1;
				var _p35 = _p33._0;
				var _p34 = group.translate;
				if (_p34.ctor === 'Nothing') {
					return _elm_lang$core$Native_Utils.update(
						group,
						{
							translate: _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple3', _0: _p35, _1: _p36, _2: _p37})
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						group,
						{
							translate: _elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple3',
									_0: A2(_mdgriffith$stylish_elephants$Internal_Model$addIfNothing, _p35, _p34._0._0),
									_1: A2(_mdgriffith$stylish_elephants$Internal_Model$addIfNothing, _p36, _p34._0._1),
									_2: A2(_mdgriffith$stylish_elephants$Internal_Model$addIfNothing, _p37, _p34._0._2)
								})
						});
				}
			case 'Rotate':
				return _elm_lang$core$Native_Utils.update(
					group,
					{
						rotate: A2(
							_mdgriffith$stylish_elephants$Internal_Model$addIfNothing,
							_elm_lang$core$Maybe$Just(
								{ctor: '_Tuple4', _0: _p33._0, _1: _p33._1, _2: _p33._2, _3: _p33._3}),
							group.rotate)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					group,
					{
						scale: A2(
							_mdgriffith$stylish_elephants$Internal_Model$addIfNothing,
							_elm_lang$core$Maybe$Just(
								{ctor: '_Tuple3', _0: _p33._0, _1: _p33._1, _2: _p33._2}),
							group.scale)
					});
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$stackOn = F3(
	function (maybePseudo, transform, gathered) {
		var states = A2(_elm_lang$core$Maybe$withDefault, _mdgriffith$stylish_elephants$Internal_Model$emptyTransformationStates, gathered.transform);
		var _p38 = maybePseudo;
		if (_p38.ctor === 'Nothing') {
			var normal = states.normal;
			return _elm_lang$core$Native_Utils.update(
				gathered,
				{
					transform: _elm_lang$core$Maybe$Just(
						_elm_lang$core$Native_Utils.update(
							states,
							{
								normal: _elm_lang$core$Maybe$Just(
									A2(
										_mdgriffith$stylish_elephants$Internal_Model$stackTransforms,
										transform,
										A2(_elm_lang$core$Maybe$withDefault, _mdgriffith$stylish_elephants$Internal_Model$emptyTransformGroup, normal)))
							}))
				});
		} else {
			switch (_p38._0.ctor) {
				case 'Hover':
					var hover = states.hover;
					return _elm_lang$core$Native_Utils.update(
						gathered,
						{
							transform: _elm_lang$core$Maybe$Just(
								_elm_lang$core$Native_Utils.update(
									states,
									{
										hover: _elm_lang$core$Maybe$Just(
											A2(
												_mdgriffith$stylish_elephants$Internal_Model$stackTransforms,
												transform,
												A2(_elm_lang$core$Maybe$withDefault, _mdgriffith$stylish_elephants$Internal_Model$emptyTransformGroup, hover)))
									}))
						});
				case 'Active':
					var active = states.active;
					return _elm_lang$core$Native_Utils.update(
						gathered,
						{
							transform: _elm_lang$core$Maybe$Just(
								_elm_lang$core$Native_Utils.update(
									states,
									{
										active: _elm_lang$core$Maybe$Just(
											A2(
												_mdgriffith$stylish_elephants$Internal_Model$stackTransforms,
												transform,
												A2(_elm_lang$core$Maybe$withDefault, _mdgriffith$stylish_elephants$Internal_Model$emptyTransformGroup, active)))
									}))
						});
				default:
					var focus = states.focus;
					return _elm_lang$core$Native_Utils.update(
						gathered,
						{
							transform: _elm_lang$core$Maybe$Just(
								_elm_lang$core$Native_Utils.update(
									states,
									{
										focus: _elm_lang$core$Maybe$Just(
											A2(
												_mdgriffith$stylish_elephants$Internal_Model$stackTransforms,
												transform,
												A2(_elm_lang$core$Maybe$withDefault, _mdgriffith$stylish_elephants$Internal_Model$emptyTransformGroup, focus)))
									}))
						});
			}
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$noAreas = function (attrs) {
	var notAnArea = function (a) {
		var _p39 = a;
		if (_p39.ctor === 'Describe') {
			return false;
		} else {
			return true;
		}
	};
	return A2(_elm_lang$core$List$filter, notAnArea, attrs);
};
var _mdgriffith$stylish_elephants$Internal_Model$alignYName = function (align) {
	var _p40 = align;
	switch (_p40.ctor) {
		case 'Top':
			return 'aligned-vertically self-top';
		case 'Bottom':
			return 'aligned-vertically self-bottom';
		default:
			return 'aligned-vertically self-center-y';
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$alignXName = function (align) {
	var _p41 = align;
	switch (_p41.ctor) {
		case 'Left':
			return 'aligned-horizontally self-left';
		case 'Right':
			return 'aligned-horizontally self-right';
		default:
			return 'aligned-horizontally self-center-x';
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$renderNode = F4(
	function (_p42, children, styles, context) {
		var _p43 = _p42;
		var _p56 = _p43.attributes;
		var _p55 = _p43.alignment;
		var createNode = F3(
			function (node, attrs, styles) {
				var _p44 = children;
				if (_p44.ctor === 'Keyed') {
					var _p46 = _p44._0;
					return A3(
						_elm_lang$virtual_dom$VirtualDom$keyedNode,
						node,
						attrs,
						function () {
							var _p45 = styles;
							if (_p45.ctor === 'Nothing') {
								return _p46;
							} else {
								return {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'stylesheet',
										_1: A3(
											_elm_lang$virtual_dom$VirtualDom$node,
											'style',
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$class('stylesheet'),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(_p45._0),
												_1: {ctor: '[]'}
											})
									},
									_1: _p46
								};
							}
						}());
				} else {
					var _p48 = _p44._0;
					return A3(
						_elm_lang$virtual_dom$VirtualDom$node,
						node,
						attrs,
						function () {
							var _p47 = styles;
							if (_p47.ctor === 'Nothing') {
								return _p48;
							} else {
								return {
									ctor: '::',
									_0: A3(
										_elm_lang$virtual_dom$VirtualDom$node,
										'style',
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('stylesheet'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(_p47._0),
											_1: {ctor: '[]'}
										}),
									_1: _p48
								};
							}
						}());
				}
			});
		var html = function () {
			var _p49 = _p43.node;
			switch (_p49.ctor) {
				case 'Generic':
					return A3(createNode, 'div', _p56, styles);
				case 'NodeName':
					return A3(createNode, _p49._0, _p56, styles);
				default:
					return A3(
						_elm_lang$virtual_dom$VirtualDom$node,
						_p49._0,
						_p56,
						{
							ctor: '::',
							_0: A3(
								createNode,
								_p49._1,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('se el'),
									_1: {ctor: '[]'}
								},
								styles),
							_1: {ctor: '[]'}
						});
			}
		}();
		var _p50 = context;
		switch (_p50.ctor) {
			case 'AsRow':
				var _p51 = _p43.width;
				if ((_p51.ctor === 'Just') && (_p51._0.ctor === 'Fill')) {
					return html;
				} else {
					var _p52 = _p55;
					_v31_2:
					do {
						if ((_p52.ctor === 'Aligned') && (_p52._0.ctor === 'Just')) {
							switch (_p52._0._0.ctor) {
								case 'Right':
									return A3(
										_elm_lang$virtual_dom$VirtualDom$node,
										'alignRight',
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('se el container align-container-right content-center-y'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: html,
											_1: {ctor: '[]'}
										});
								case 'CenterX':
									return A3(
										_elm_lang$virtual_dom$VirtualDom$node,
										'centerX',
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('se el container align-container-center-x content-center-y'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: html,
											_1: {ctor: '[]'}
										});
								default:
									break _v31_2;
							}
						} else {
							break _v31_2;
						}
					} while(false);
					return html;
				}
			case 'AsColumn':
				var _p53 = _p43.height;
				if ((_p53.ctor === 'Just') && (_p53._0.ctor === 'Fill')) {
					return html;
				} else {
					var _p54 = _p55;
					_v33_2:
					do {
						if ((_p54.ctor === 'Aligned') && (_p54._1.ctor === 'Just')) {
							switch (_p54._1._0.ctor) {
								case 'CenterY':
									return A3(
										_elm_lang$virtual_dom$VirtualDom$node,
										'centerY',
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('se el container align-container-center-y'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: html,
											_1: {ctor: '[]'}
										});
								case 'Bottom':
									return A3(
										_elm_lang$virtual_dom$VirtualDom$node,
										'alignBottom',
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('se el container align-container-bottom'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: html,
											_1: {ctor: '[]'}
										});
								default:
									break _v33_2;
							}
						} else {
							break _v33_2;
						}
					} while(false);
					return html;
				}
			default:
				return html;
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$NearbyGroup = F6(
	function (a, b, c, d, e, f) {
		return {above: a, below: b, right: c, left: d, infront: e, behind: f};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Gathered = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {node: a, attributes: b, styles: c, alignment: d, width: e, height: f, nearbys: g, filters: h, boxShadows: i, textShadows: j, transform: k, has: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _mdgriffith$stylish_elephants$Internal_Model$Decorated = F4(
	function (a, b, c, d) {
		return {focus: a, hover: b, normal: c, active: d};
	});
var _mdgriffith$stylish_elephants$Internal_Model$TransformationGroup = F3(
	function (a, b, c) {
		return {rotate: a, translate: b, scale: c};
	});
var _mdgriffith$stylish_elephants$Internal_Model$OptionRecord = F3(
	function (a, b, c) {
		return {hover: a, focus: b, mode: c};
	});
var _mdgriffith$stylish_elephants$Internal_Model$FocusStyle = F3(
	function (a, b, c) {
		return {borderColor: a, shadow: b, backgroundColor: c};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Shadow = F4(
	function (a, b, c, d) {
		return {color: a, offset: b, blur: c, size: d};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Empty = {ctor: 'Empty'};
var _mdgriffith$stylish_elephants$Internal_Model$Text = function (a) {
	return {ctor: 'Text', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Styled = function (a) {
	return {ctor: 'Styled', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Unstyled = function (a) {
	return {ctor: 'Unstyled', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$unstyled = function (_p57) {
	return _mdgriffith$stylish_elephants$Internal_Model$Unstyled(
		_elm_lang$core$Basics$always(_p57));
};
var _mdgriffith$stylish_elephants$Internal_Model$rowEdgeFillers = function (children) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		children,
		{
			ctor: '::',
			_0: _mdgriffith$stylish_elephants$Internal_Model$unstyled(
				A3(
					_elm_lang$virtual_dom$VirtualDom$node,
					'div',
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('se container align-container-left teleporting-spacer unfocusable'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'})),
			_1: {
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Internal_Model$unstyled(
					A3(
						_elm_lang$virtual_dom$VirtualDom$node,
						'alignRight',
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('se container align-container-right spacer unfocusable'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'})),
				_1: {ctor: '[]'}
			}
		});
};
var _mdgriffith$stylish_elephants$Internal_Model$keyedRowEdgeFillers = function (children) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		children,
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'teleporting-left-filler-node',
				_1: _mdgriffith$stylish_elephants$Internal_Model$unstyled(
					A3(
						_elm_lang$virtual_dom$VirtualDom$node,
						'div',
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('se container align-container-left teleporting-spacer'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'right-filler-node',
					_1: _mdgriffith$stylish_elephants$Internal_Model$unstyled(
						A3(
							_elm_lang$virtual_dom$VirtualDom$node,
							'alignRight',
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('se container align-container-right spacer'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}))
				},
				_1: {ctor: '[]'}
			}
		});
};
var _mdgriffith$stylish_elephants$Internal_Model$columnEdgeFillers = function (children) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		children,
		{
			ctor: '::',
			_0: _mdgriffith$stylish_elephants$Internal_Model$unstyled(
				A3(
					_elm_lang$virtual_dom$VirtualDom$node,
					'div',
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('se container align-container-top teleporting-spacer unfocusable'),
						_1: {ctor: '[]'}
					},
					{ctor: '[]'})),
			_1: {
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Internal_Model$unstyled(
					A3(
						_elm_lang$virtual_dom$VirtualDom$node,
						'alignBottom',
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('se container align-container-bottom spacer unfocusable'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'})),
				_1: {ctor: '[]'}
			}
		});
};
var _mdgriffith$stylish_elephants$Internal_Model$keyedColumnEdgeFillers = function (children) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		children,
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'teleporting-top-filler-node',
				_1: _mdgriffith$stylish_elephants$Internal_Model$unstyled(
					A3(
						_elm_lang$virtual_dom$VirtualDom$node,
						'div',
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('se container align-container-top teleporting-spacer'),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'bottom-filler-node',
					_1: _mdgriffith$stylish_elephants$Internal_Model$unstyled(
						A3(
							_elm_lang$virtual_dom$VirtualDom$node,
							'alignBottom',
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('se container align-container-bottom spacer'),
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}))
				},
				_1: {ctor: '[]'}
			}
		});
};
var _mdgriffith$stylish_elephants$Internal_Model$map = F2(
	function (fn, el) {
		var _p58 = el;
		switch (_p58.ctor) {
			case 'Styled':
				var _p59 = _p58._0;
				return _mdgriffith$stylish_elephants$Internal_Model$Styled(
					{
						styles: _p59.styles,
						html: F2(
							function (add, context) {
								return A2(
									_elm_lang$html$Html$map,
									fn,
									A2(_p59.html, add, context));
							})
					});
			case 'Unstyled':
				return _mdgriffith$stylish_elephants$Internal_Model$Unstyled(
					function (_p60) {
						return A2(
							_elm_lang$html$Html$map,
							fn,
							_p58._0(_p60));
					});
			case 'Text':
				return _mdgriffith$stylish_elephants$Internal_Model$Text(_p58._0);
			default:
				return _mdgriffith$stylish_elephants$Internal_Model$Empty;
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$AsTextColumn = {ctor: 'AsTextColumn'};
var _mdgriffith$stylish_elephants$Internal_Model$asTextColumn = _mdgriffith$stylish_elephants$Internal_Model$AsTextColumn;
var _mdgriffith$stylish_elephants$Internal_Model$AsParagraph = {ctor: 'AsParagraph'};
var _mdgriffith$stylish_elephants$Internal_Model$asParagraph = _mdgriffith$stylish_elephants$Internal_Model$AsParagraph;
var _mdgriffith$stylish_elephants$Internal_Model$AsGrid = {ctor: 'AsGrid'};
var _mdgriffith$stylish_elephants$Internal_Model$asGrid = _mdgriffith$stylish_elephants$Internal_Model$AsGrid;
var _mdgriffith$stylish_elephants$Internal_Model$AsEl = {ctor: 'AsEl'};
var _mdgriffith$stylish_elephants$Internal_Model$asEl = _mdgriffith$stylish_elephants$Internal_Model$AsEl;
var _mdgriffith$stylish_elephants$Internal_Model$renderNearbyGroupAbsolute = function (nearbys) {
	var create = function (_p61) {
		var _p62 = _p61;
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(
						_elm_lang$core$Basics_ops['++'],
						_mdgriffith$stylish_elephants$Internal_Model$locationClass(_p62._0),
						(!_p62._1) ? ' hidden' : '')),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: function () {
					var _p63 = _p62._2;
					switch (_p63.ctor) {
						case 'Empty':
							return _elm_lang$html$Html$text('');
						case 'Text':
							return _mdgriffith$stylish_elephants$Internal_Model$textElement(_p63._0);
						case 'Unstyled':
							return _p63._0(_mdgriffith$stylish_elephants$Internal_Model$asEl);
						default:
							return A2(_p63._0.html, _elm_lang$core$Maybe$Nothing, _mdgriffith$stylish_elephants$Internal_Model$asEl);
					}
				}(),
				_1: {ctor: '[]'}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('se el nearby'),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, create, nearbys));
};
var _mdgriffith$stylish_elephants$Internal_Model$AsColumn = {ctor: 'AsColumn'};
var _mdgriffith$stylish_elephants$Internal_Model$asColumn = _mdgriffith$stylish_elephants$Internal_Model$AsColumn;
var _mdgriffith$stylish_elephants$Internal_Model$AsRow = {ctor: 'AsRow'};
var _mdgriffith$stylish_elephants$Internal_Model$asRow = _mdgriffith$stylish_elephants$Internal_Model$AsRow;
var _mdgriffith$stylish_elephants$Internal_Model$Aligned = F2(
	function (a, b) {
		return {ctor: 'Aligned', _0: a, _1: b};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Unaligned = {ctor: 'Unaligned'};
var _mdgriffith$stylish_elephants$Internal_Model$Right = {ctor: 'Right'};
var _mdgriffith$stylish_elephants$Internal_Model$CenterX = {ctor: 'CenterX'};
var _mdgriffith$stylish_elephants$Internal_Model$Left = {ctor: 'Left'};
var _mdgriffith$stylish_elephants$Internal_Model$Bottom = {ctor: 'Bottom'};
var _mdgriffith$stylish_elephants$Internal_Model$CenterY = {ctor: 'CenterY'};
var _mdgriffith$stylish_elephants$Internal_Model$Top = {ctor: 'Top'};
var _mdgriffith$stylish_elephants$Internal_Model$Shadows = F2(
	function (a, b) {
		return {ctor: 'Shadows', _0: a, _1: b};
	});
var _mdgriffith$stylish_elephants$Internal_Model$onlyStyles = function (attr) {
	var _p64 = attr;
	switch (_p64.ctor) {
		case 'StyleClass':
			return _elm_lang$core$Maybe$Just(_p64._0);
		case 'TextShadow':
			var stringName = _mdgriffith$stylish_elephants$Internal_Model$formatTextShadow(_p64._0);
			return _elm_lang$core$Maybe$Just(
				A2(
					_mdgriffith$stylish_elephants$Internal_Model$Shadows,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'txt-shadow-',
						_mdgriffith$stylish_elephants$Internal_Model$className(stringName)),
					stringName));
		case 'BoxShadow':
			var stringName = _mdgriffith$stylish_elephants$Internal_Model$formatBoxShadow(_p64._0);
			return _elm_lang$core$Maybe$Just(
				A2(
					_mdgriffith$stylish_elephants$Internal_Model$Shadows,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'box-shadow-',
						_mdgriffith$stylish_elephants$Internal_Model$className(stringName)),
					stringName));
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$Transparency = F2(
	function (a, b) {
		return {ctor: 'Transparency', _0: a, _1: b};
	});
var _mdgriffith$stylish_elephants$Internal_Model$PseudoSelector = F2(
	function (a, b) {
		return {ctor: 'PseudoSelector', _0: a, _1: b};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Transform = function (a) {
	return {ctor: 'Transform', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$GridPosition = function (a) {
	return {ctor: 'GridPosition', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$GridTemplateStyle = function (a) {
	return {ctor: 'GridTemplateStyle', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$PaddingStyle = F4(
	function (a, b, c, d) {
		return {ctor: 'PaddingStyle', _0: a, _1: b, _2: c, _3: d};
	});
var _mdgriffith$stylish_elephants$Internal_Model$SpacingStyle = F2(
	function (a, b) {
		return {ctor: 'SpacingStyle', _0: a, _1: b};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Colored = F3(
	function (a, b, c) {
		return {ctor: 'Colored', _0: a, _1: b, _2: c};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Single = F3(
	function (a, b, c) {
		return {ctor: 'Single', _0: a, _1: b, _2: c};
	});
var _mdgriffith$stylish_elephants$Internal_Model$renderTransformationGroup = F2(
	function (maybePseudo, group) {
		var name = A2(
			_elm_lang$core$String$join,
			'-',
			A2(
				_elm_lang$core$List$filterMap,
				_elm_lang$core$Basics$identity,
				{
					ctor: '::',
					_0: A3(
						_elm_lang$core$Basics$flip,
						_elm_lang$core$Maybe$map,
						group.translate,
						function (_p65) {
							var _p66 = _p65;
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'move-',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_mdgriffith$stylish_elephants$Internal_Model$floatClass(
										A2(_elm_lang$core$Maybe$withDefault, 0, _p66._0)),
									A2(
										_elm_lang$core$Basics_ops['++'],
										'-',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_mdgriffith$stylish_elephants$Internal_Model$floatClass(
												A2(_elm_lang$core$Maybe$withDefault, 0, _p66._1)),
											A2(
												_elm_lang$core$Basics_ops['++'],
												'-',
												_mdgriffith$stylish_elephants$Internal_Model$floatClass(
													A2(_elm_lang$core$Maybe$withDefault, 0, _p66._2)))))));
						}),
					_1: {
						ctor: '::',
						_0: A3(
							_elm_lang$core$Basics$flip,
							_elm_lang$core$Maybe$map,
							group.scale,
							function (_p67) {
								var _p68 = _p67;
								return A2(
									_elm_lang$core$Basics_ops['++'],
									'scale',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_mdgriffith$stylish_elephants$Internal_Model$floatClass(_p68._0),
										A2(
											_elm_lang$core$Basics_ops['++'],
											'-',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_mdgriffith$stylish_elephants$Internal_Model$floatClass(_p68._1),
												A2(
													_elm_lang$core$Basics_ops['++'],
													'-',
													_mdgriffith$stylish_elephants$Internal_Model$floatClass(_p68._2))))));
							}),
						_1: {
							ctor: '::',
							_0: A3(
								_elm_lang$core$Basics$flip,
								_elm_lang$core$Maybe$map,
								group.rotate,
								function (_p69) {
									var _p70 = _p69;
									return A2(
										_elm_lang$core$Basics_ops['++'],
										'rotate-',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_mdgriffith$stylish_elephants$Internal_Model$floatClass(_p70._0),
											A2(
												_elm_lang$core$Basics_ops['++'],
												'-',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_mdgriffith$stylish_elephants$Internal_Model$floatClass(_p70._1),
													A2(
														_elm_lang$core$Basics_ops['++'],
														'-',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_mdgriffith$stylish_elephants$Internal_Model$floatClass(_p70._2),
															A2(
																_elm_lang$core$Basics_ops['++'],
																'-',
																_mdgriffith$stylish_elephants$Internal_Model$floatClass(_p70._3))))))));
								}),
							_1: {ctor: '[]'}
						}
					}
				}));
		var rotate = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$Maybe$map,
			group.rotate,
			function (_p71) {
				var _p72 = _p71;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'rotate3d(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p72._0),
						A2(
							_elm_lang$core$Basics_ops['++'],
							',',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p72._1),
								A2(
									_elm_lang$core$Basics_ops['++'],
									',',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(_p72._2),
										A2(
											_elm_lang$core$Basics_ops['++'],
											',',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p72._3),
												'rad)'))))))));
			});
		var scale = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$Maybe$map,
			group.scale,
			function (_p73) {
				var _p74 = _p73;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'scale3d(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p74._0),
						A2(
							_elm_lang$core$Basics_ops['++'],
							', ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p74._1),
								A2(
									_elm_lang$core$Basics_ops['++'],
									', ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(_p74._2),
										')'))))));
			});
		var translate = A3(
			_elm_lang$core$Basics$flip,
			_elm_lang$core$Maybe$map,
			group.translate,
			function (_p75) {
				var _p76 = _p75;
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'translate3d(',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(
							A2(_elm_lang$core$Maybe$withDefault, 0, _p76._0)),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'px, ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(
									A2(_elm_lang$core$Maybe$withDefault, 0, _p76._1)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'px, ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(
											A2(_elm_lang$core$Maybe$withDefault, 0, _p76._2)),
										'px)'))))));
			});
		var transformations = A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			{
				ctor: '::',
				_0: scale,
				_1: {
					ctor: '::',
					_0: translate,
					_1: {
						ctor: '::',
						_0: rotate,
						_1: {ctor: '[]'}
					}
				}
			});
		var _p77 = transformations;
		if (_p77.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p78 = function () {
				var _p79 = maybePseudo;
				if (_p79.ctor === 'Nothing') {
					return {
						ctor: '_Tuple2',
						_0: A2(_elm_lang$core$Basics_ops['++'], 'transform-', name),
						_1: A2(_elm_lang$core$Basics_ops['++'], '.transform-', name)
					};
				} else {
					var _p80 = _p79._0;
					switch (_p80.ctor) {
						case 'Hover':
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'transform-',
									A2(_elm_lang$core$Basics_ops['++'], name, '-hover')),
								_1: A2(
									_elm_lang$core$Basics_ops['++'],
									'.transform-',
									A2(_elm_lang$core$Basics_ops['++'], name, '-hover:hover'))
							};
						case 'Focus':
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'transform-',
									A2(_elm_lang$core$Basics_ops['++'], name, '-focus')),
								_1: A2(
									_elm_lang$core$Basics_ops['++'],
									'.transform-',
									A2(
										_elm_lang$core$Basics_ops['++'],
										name,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'-focus:focus, .se:focus ~ .transform-',
											A2(_elm_lang$core$Basics_ops['++'], name, '-focus'))))
							};
						default:
							return {
								ctor: '_Tuple2',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'transform-',
									A2(_elm_lang$core$Basics_ops['++'], name, '-active')),
								_1: A2(
									_elm_lang$core$Basics_ops['++'],
									'.transform-',
									A2(_elm_lang$core$Basics_ops['++'], name, '-active:active'))
							};
					}
				}
			}();
			var classOnElement = _p78._0;
			var classInStylesheet = _p78._1;
			var transforms = A2(_elm_lang$core$String$join, ' ', _p77);
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '_Tuple2',
					_0: classOnElement,
					_1: A3(_mdgriffith$stylish_elephants$Internal_Model$Single, classInStylesheet, 'transform', transforms)
				});
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$FontSize = function (a) {
	return {ctor: 'FontSize', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$FontFamily = F2(
	function (a, b) {
		return {ctor: 'FontFamily', _0: a, _1: b};
	});
var _mdgriffith$stylish_elephants$Internal_Model$LineHeight = function (a) {
	return {ctor: 'LineHeight', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Style = F2(
	function (a, b) {
		return {ctor: 'Style', _0: a, _1: b};
	});
var _mdgriffith$stylish_elephants$Internal_Model$tag = F2(
	function (label, style) {
		var _p81 = style;
		switch (_p81.ctor) {
			case 'Single':
				return A3(
					_mdgriffith$stylish_elephants$Internal_Model$Single,
					A2(
						_elm_lang$core$Basics_ops['++'],
						label,
						A2(_elm_lang$core$Basics_ops['++'], '-', _p81._0)),
					_p81._1,
					_p81._2);
			case 'Colored':
				return A3(
					_mdgriffith$stylish_elephants$Internal_Model$Colored,
					A2(
						_elm_lang$core$Basics_ops['++'],
						label,
						A2(_elm_lang$core$Basics_ops['++'], '-', _p81._0)),
					_p81._1,
					_p81._2);
			case 'Style':
				return A2(
					_mdgriffith$stylish_elephants$Internal_Model$Style,
					A2(
						_elm_lang$core$Basics_ops['++'],
						label,
						A2(_elm_lang$core$Basics_ops['++'], '-', _p81._0)),
					_p81._1);
			case 'Transparency':
				return A2(
					_mdgriffith$stylish_elephants$Internal_Model$Transparency,
					A2(
						_elm_lang$core$Basics_ops['++'],
						label,
						A2(_elm_lang$core$Basics_ops['++'], '-', _p81._0)),
					_p81._1);
			default:
				return _p81;
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$Active = {ctor: 'Active'};
var _mdgriffith$stylish_elephants$Internal_Model$Hover = {ctor: 'Hover'};
var _mdgriffith$stylish_elephants$Internal_Model$Focus = {ctor: 'Focus'};
var _mdgriffith$stylish_elephants$Internal_Model$finalize = function (gathered) {
	var addTextShadows = function (_p82) {
		var _p83 = _p82;
		var _p87 = _p83._1;
		var _p86 = _p83._0;
		var _p84 = gathered.textShadows;
		if (_p84.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: _p86, _1: _p87};
		} else {
			var _p85 = _p84._0;
			var name = A2(
				_elm_lang$core$Basics_ops['++'],
				'text-shadow-',
				_mdgriffith$stylish_elephants$Internal_Model$className(_p85));
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: name, _1: _p86},
				_1: {
					ctor: '::',
					_0: A3(
						_mdgriffith$stylish_elephants$Internal_Model$Single,
						A2(_elm_lang$core$Basics_ops['++'], '.', name),
						'text-shadow',
						_p85),
					_1: _p87
				}
			};
		}
	};
	var addBoxShadows = function (_p88) {
		var _p89 = _p88;
		var _p93 = _p89._1;
		var _p92 = _p89._0;
		var _p90 = gathered.boxShadows;
		if (_p90.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: _p92, _1: _p93};
		} else {
			var _p91 = _p90._0;
			var name = A2(
				_elm_lang$core$Basics_ops['++'],
				'box-shadow-',
				_mdgriffith$stylish_elephants$Internal_Model$className(_p91));
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: name, _1: _p92},
				_1: {
					ctor: '::',
					_0: A3(
						_mdgriffith$stylish_elephants$Internal_Model$Single,
						A2(_elm_lang$core$Basics_ops['++'], '.', name),
						'box-shadow',
						_p91),
					_1: _p93
				}
			};
		}
	};
	var addFilters = function (_p94) {
		var _p95 = _p94;
		var _p99 = _p95._1;
		var _p98 = _p95._0;
		var _p96 = gathered.filters;
		if (_p96.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: _p98, _1: _p99};
		} else {
			var _p97 = _p96._0;
			var name = A2(
				_elm_lang$core$Basics_ops['++'],
				'filter-',
				_mdgriffith$stylish_elephants$Internal_Model$className(_p97));
			return {
				ctor: '_Tuple2',
				_0: {ctor: '::', _0: name, _1: _p98},
				_1: {
					ctor: '::',
					_0: A3(
						_mdgriffith$stylish_elephants$Internal_Model$Single,
						A2(_elm_lang$core$Basics_ops['++'], '.', name),
						'filter',
						_p97),
					_1: _p99
				}
			};
		}
	};
	var add = F2(
		function ($new, _p100) {
			var _p101 = _p100;
			var _p104 = _p101._1;
			var _p103 = _p101._0;
			var _p102 = $new;
			if (_p102.ctor === 'Nothing') {
				return {ctor: '_Tuple2', _0: _p103, _1: _p104};
			} else {
				return {
					ctor: '_Tuple2',
					_0: {ctor: '::', _0: _p102._0._0, _1: _p103},
					_1: {ctor: '::', _0: _p102._0._1, _1: _p104}
				};
			}
		});
	var addTransform = function (_p105) {
		var _p106 = _p105;
		var _p110 = _p106._1;
		var _p109 = _p106._0;
		var _p107 = gathered.transform;
		if (_p107.ctor === 'Nothing') {
			return {ctor: '_Tuple2', _0: _p109, _1: _p110};
		} else {
			var _p108 = _p107._0;
			return A2(
				add,
				A2(
					_elm_lang$core$Maybe$andThen,
					_mdgriffith$stylish_elephants$Internal_Model$renderTransformationGroup(
						_elm_lang$core$Maybe$Just(_mdgriffith$stylish_elephants$Internal_Model$Active)),
					_p108.active),
				A2(
					add,
					A2(
						_elm_lang$core$Maybe$andThen,
						_mdgriffith$stylish_elephants$Internal_Model$renderTransformationGroup(
							_elm_lang$core$Maybe$Just(_mdgriffith$stylish_elephants$Internal_Model$Hover)),
						_p108.hover),
					A2(
						add,
						A2(
							_elm_lang$core$Maybe$andThen,
							_mdgriffith$stylish_elephants$Internal_Model$renderTransformationGroup(
								_elm_lang$core$Maybe$Just(_mdgriffith$stylish_elephants$Internal_Model$Focus)),
							_p108.focus),
						A2(
							add,
							A2(
								_elm_lang$core$Maybe$andThen,
								_mdgriffith$stylish_elephants$Internal_Model$renderTransformationGroup(_elm_lang$core$Maybe$Nothing),
								_p108.normal),
							{ctor: '_Tuple2', _0: _p109, _1: _p110}))));
		}
	};
	var _p111 = addTransform(
		addTextShadows(
			addBoxShadows(
				addFilters(
					{
						ctor: '_Tuple2',
						_0: {ctor: '[]'},
						_1: gathered.styles
					}))));
	var classes = _p111._0;
	var styles = _p111._1;
	return _elm_lang$core$Native_Utils.update(
		gathered,
		{
			styles: styles,
			attributes: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class(
					A2(_elm_lang$core$String$join, ' ', classes)),
				_1: gathered.attributes
			}
		});
};
var _mdgriffith$stylish_elephants$Internal_Model$ImportFont = F2(
	function (a, b) {
		return {ctor: 'ImportFont', _0: a, _1: b};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Typeface = function (a) {
	return {ctor: 'Typeface', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Monospace = {ctor: 'Monospace'};
var _mdgriffith$stylish_elephants$Internal_Model$SansSerif = {ctor: 'SansSerif'};
var _mdgriffith$stylish_elephants$Internal_Model$Serif = {ctor: 'Serif'};
var _mdgriffith$stylish_elephants$Internal_Model$Property = F2(
	function (a, b) {
		return {ctor: 'Property', _0: a, _1: b};
	});
var _mdgriffith$stylish_elephants$Internal_Model$renderFocusStyle = function (focus) {
	return A2(
		_mdgriffith$stylish_elephants$Internal_Model$Style,
		'.se:focus .focusable, .se.focusable:focus',
		A2(
			_elm_lang$core$List$filterMap,
			_elm_lang$core$Basics$identity,
			{
				ctor: '::',
				_0: A2(
					_elm_lang$core$Maybe$map,
					function (color) {
						return A2(
							_mdgriffith$stylish_elephants$Internal_Model$Property,
							'border-color',
							_mdgriffith$stylish_elephants$Internal_Model$formatColor(color));
					},
					focus.borderColor),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$core$Maybe$map,
						function (color) {
							return A2(
								_mdgriffith$stylish_elephants$Internal_Model$Property,
								'background-color',
								_mdgriffith$stylish_elephants$Internal_Model$formatColor(color));
						},
						focus.backgroundColor),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Maybe$map,
							function (shadow) {
								return A2(
									_mdgriffith$stylish_elephants$Internal_Model$Property,
									'box-shadow',
									_mdgriffith$stylish_elephants$Internal_Model$formatBoxShadow(
										{color: shadow.color, offset: shadow.offset, inset: false, blur: shadow.blur, size: shadow.size}));
							},
							focus.shadow),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Maybe$Just(
								A2(_mdgriffith$stylish_elephants$Internal_Model$Property, 'outline', 'none')),
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};
var _mdgriffith$stylish_elephants$Internal_Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var renderTopLevels = function (rule) {
			var _p112 = rule;
			if (_p112.ctor === 'FontFamily') {
				var getImports = function (font) {
					var _p113 = font;
					if (_p113.ctor === 'ImportFont') {
						return _elm_lang$core$Maybe$Just(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'@import url(\'',
								A2(_elm_lang$core$Basics_ops['++'], _p113._1, '\');')));
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				};
				return _elm_lang$core$Maybe$Just(
					A2(
						_elm_lang$core$String$join,
						'\n',
						A2(_elm_lang$core$List$filterMap, getImports, _p112._1)));
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		};
		var renderProps = F3(
			function (force, _p114, existing) {
				var _p115 = _p114;
				var _p117 = _p115._1;
				var _p116 = _p115._0;
				return force ? A2(
					_elm_lang$core$Basics_ops['++'],
					existing,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\n  ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p116,
							A2(
								_elm_lang$core$Basics_ops['++'],
								': ',
								A2(_elm_lang$core$Basics_ops['++'], _p117, ' !important;'))))) : A2(
					_elm_lang$core$Basics_ops['++'],
					existing,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'\n  ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p116,
							A2(
								_elm_lang$core$Basics_ops['++'],
								': ',
								A2(_elm_lang$core$Basics_ops['++'], _p117, ';')))));
			});
		var renderStyle = F4(
			function (force, maybePseudo, selector, props) {
				var _p118 = maybePseudo;
				if (_p118.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						selector,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'{',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A3(
									_elm_lang$core$List$foldl,
									renderProps(force),
									'',
									props),
								'\n}')));
				} else {
					var _p119 = _p118._0;
					switch (_p119.ctor) {
						case 'Hover':
							return A2(
								_elm_lang$core$Basics_ops['++'],
								selector,
								A2(
									_elm_lang$core$Basics_ops['++'],
									':hover {',
									A2(
										_elm_lang$core$Basics_ops['++'],
										A3(
											_elm_lang$core$List$foldl,
											renderProps(force),
											'',
											props),
										'\n}')));
						case 'Focus':
							var renderedProps = A3(
								_elm_lang$core$List$foldl,
								renderProps(force),
								'',
								props);
							return A2(
								_elm_lang$core$String$join,
								'\n',
								{
									ctor: '::',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										selector,
										A2(
											_elm_lang$core$Basics_ops['++'],
											':focus {',
											A2(_elm_lang$core$Basics_ops['++'], renderedProps, '\n}'))),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$core$Basics_ops['++'],
											'.se:focus ~ ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												selector,
												A2(
													_elm_lang$core$Basics_ops['++'],
													':not(.focus)  {',
													A2(_elm_lang$core$Basics_ops['++'], renderedProps, '\n}')))),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$core$Basics_ops['++'],
												'.se:focus ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													selector,
													A2(
														_elm_lang$core$Basics_ops['++'],
														'  {',
														A2(_elm_lang$core$Basics_ops['++'], renderedProps, '\n}')))),
											_1: {ctor: '[]'}
										}
									}
								});
						default:
							return A2(
								_elm_lang$core$Basics_ops['++'],
								selector,
								A2(
									_elm_lang$core$Basics_ops['++'],
									':active {',
									A2(
										_elm_lang$core$Basics_ops['++'],
										A3(
											_elm_lang$core$List$foldl,
											renderProps(force),
											'',
											props),
										'\n}')));
					}
				}
			});
		var renderStyleRule = F3(
			function (rule, maybePseudo, force) {
				var _p120 = rule;
				switch (_p120.ctor) {
					case 'Style':
						return A4(renderStyle, force, maybePseudo, _p120._0, _p120._1);
					case 'Shadows':
						return A4(
							renderStyle,
							force,
							maybePseudo,
							A2(_elm_lang$core$Basics_ops['++'], '.', _p120._0),
							{
								ctor: '::',
								_0: A2(_mdgriffith$stylish_elephants$Internal_Model$Property, 'box-shadow', _p120._1),
								_1: {ctor: '[]'}
							});
					case 'Transparency':
						var _p121 = _p120._0;
						var opacity = A2(
							_elm_lang$core$Basics$max,
							0,
							A2(_elm_lang$core$Basics$min, 1, 1 - _p120._1));
						return (_elm_lang$core$Native_Utils.cmp(opacity, 0) < 1) ? A4(
							renderStyle,
							force,
							maybePseudo,
							A2(_elm_lang$core$Basics_ops['++'], '.', _p121),
							{
								ctor: '::',
								_0: A2(_mdgriffith$stylish_elephants$Internal_Model$Property, 'opacity', '0'),
								_1: {
									ctor: '::',
									_0: A2(_mdgriffith$stylish_elephants$Internal_Model$Property, 'pointer-events', 'none'),
									_1: {ctor: '[]'}
								}
							}) : A4(
							renderStyle,
							force,
							maybePseudo,
							A2(_elm_lang$core$Basics_ops['++'], '.', _p121),
							{
								ctor: '::',
								_0: A2(
									_mdgriffith$stylish_elephants$Internal_Model$Property,
									'opacity',
									_elm_lang$core$Basics$toString(opacity)),
								_1: {
									ctor: '::',
									_0: A2(_mdgriffith$stylish_elephants$Internal_Model$Property, 'pointer-events', 'auto'),
									_1: {ctor: '[]'}
								}
							});
					case 'FontSize':
						var _p122 = _p120._0;
						return A4(
							renderStyle,
							force,
							maybePseudo,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'.font-size-',
								_mdgriffith$stylish_elephants$Internal_Model$intToString(_p122)),
							{
								ctor: '::',
								_0: A2(
									_mdgriffith$stylish_elephants$Internal_Model$Property,
									'font-size',
									_mdgriffith$stylish_elephants$Internal_Model$intToString(_p122)),
								_1: {ctor: '[]'}
							});
					case 'FontFamily':
						return A4(
							renderStyle,
							force,
							maybePseudo,
							A2(_elm_lang$core$Basics_ops['++'], '.', _p120._0),
							{
								ctor: '::',
								_0: A2(
									_mdgriffith$stylish_elephants$Internal_Model$Property,
									'font-family',
									_mdgriffith$stylish_elephants$Internal_Model$renderFont(_p120._1)),
								_1: {ctor: '[]'}
							});
					case 'LineHeight':
						var _p123 = _p120._0;
						return A4(
							renderStyle,
							force,
							maybePseudo,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'.line-height-',
								_mdgriffith$stylish_elephants$Internal_Model$floatClass(_p123)),
							{
								ctor: '::',
								_0: A2(
									_mdgriffith$stylish_elephants$Internal_Model$Property,
									'line-height',
									_elm_lang$core$Basics$toString(_p123)),
								_1: {ctor: '[]'}
							});
					case 'Single':
						return A4(
							renderStyle,
							force,
							maybePseudo,
							_p120._0,
							{
								ctor: '::',
								_0: A2(_mdgriffith$stylish_elephants$Internal_Model$Property, _p120._1, _p120._2),
								_1: {ctor: '[]'}
							});
					case 'Colored':
						return A4(
							renderStyle,
							force,
							maybePseudo,
							_p120._0,
							{
								ctor: '::',
								_0: A2(
									_mdgriffith$stylish_elephants$Internal_Model$Property,
									_p120._1,
									_mdgriffith$stylish_elephants$Internal_Model$formatColor(_p120._2)),
								_1: {ctor: '[]'}
							});
					case 'SpacingStyle':
						var _p125 = _p120._1;
						var _p124 = _p120._0;
						var $class = A2(
							_elm_lang$core$Basics_ops['++'],
							'.spacing-',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p124),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'-',
									_elm_lang$core$Basics$toString(_p125))));
						return A3(
							_elm_lang$core$List$foldl,
							F2(
								function (x, y) {
									return A2(_elm_lang$core$Basics_ops['++'], x, y);
								}),
							'',
							{
								ctor: '::',
								_0: A4(
									renderStyle,
									force,
									maybePseudo,
									A2(_elm_lang$core$Basics_ops['++'], $class, '.row > .se'),
									{
										ctor: '::',
										_0: A2(
											_mdgriffith$stylish_elephants$Internal_Model$Property,
											'margin-left',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p124),
												'px')),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A4(
										renderStyle,
										force,
										maybePseudo,
										A2(_elm_lang$core$Basics_ops['++'], $class, '.column > .se'),
										{
											ctor: '::',
											_0: A2(
												_mdgriffith$stylish_elephants$Internal_Model$Property,
												'margin-top',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(_p125),
													'px')),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A4(
											renderStyle,
											force,
											maybePseudo,
											A2(_elm_lang$core$Basics_ops['++'], $class, '.page > .se'),
											{
												ctor: '::',
												_0: A2(
													_mdgriffith$stylish_elephants$Internal_Model$Property,
													'margin-top',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(_p125),
														'px')),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A4(
												renderStyle,
												force,
												maybePseudo,
												A2(_elm_lang$core$Basics_ops['++'], $class, '.page > .self-left'),
												{
													ctor: '::',
													_0: A2(
														_mdgriffith$stylish_elephants$Internal_Model$Property,
														'margin-right',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_elm_lang$core$Basics$toString(_p124),
															'px')),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A4(
													renderStyle,
													force,
													maybePseudo,
													A2(_elm_lang$core$Basics_ops['++'], $class, '.page > .self-right'),
													{
														ctor: '::',
														_0: A2(
															_mdgriffith$stylish_elephants$Internal_Model$Property,
															'margin-left',
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(_p124),
																'px')),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A4(
														renderStyle,
														force,
														maybePseudo,
														A2(_elm_lang$core$Basics_ops['++'], $class, '.paragraph > .se'),
														{
															ctor: '::',
															_0: A2(
																_mdgriffith$stylish_elephants$Internal_Model$Property,
																'margin-right',
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	_elm_lang$core$Basics$toString(
																		_elm_lang$core$Basics$toFloat(_p124) / 2),
																	'px')),
															_1: {
																ctor: '::',
																_0: A2(
																	_mdgriffith$stylish_elephants$Internal_Model$Property,
																	'margin-left',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_elm_lang$core$Basics$toString(
																			_elm_lang$core$Basics$toFloat(_p124) / 2),
																		'px')),
																_1: {ctor: '[]'}
															}
														}),
													_1: {
														ctor: '::',
														_0: A4(
															renderStyle,
															force,
															maybePseudo,
															A2(_elm_lang$core$Basics_ops['++'], $class, '.paragraph > .se'),
															{
																ctor: '::',
																_0: A2(
																	_mdgriffith$stylish_elephants$Internal_Model$Property,
																	'margin-bottom',
																	A2(
																		_elm_lang$core$Basics_ops['++'],
																		_elm_lang$core$Basics$toString(
																			_elm_lang$core$Basics$toFloat(_p125) / 2),
																		'px')),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_mdgriffith$stylish_elephants$Internal_Model$Property,
																		'margin-top',
																		A2(
																			_elm_lang$core$Basics_ops['++'],
																			_elm_lang$core$Basics$toString(
																				_elm_lang$core$Basics$toFloat(_p125) / 2),
																			'px')),
																	_1: {ctor: '[]'}
																}
															}),
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							});
					case 'PaddingStyle':
						var _p129 = _p120._0;
						var _p128 = _p120._1;
						var _p127 = _p120._3;
						var _p126 = _p120._2;
						var $class = A2(
							_elm_lang$core$Basics_ops['++'],
							'.pad-',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(_p129),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'-',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(_p128),
										A2(
											_elm_lang$core$Basics_ops['++'],
											'-',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p126),
												A2(
													_elm_lang$core$Basics_ops['++'],
													'-',
													_elm_lang$core$Basics$toString(_p127))))))));
						return A4(
							renderStyle,
							force,
							maybePseudo,
							$class,
							{
								ctor: '::',
								_0: A2(
									_mdgriffith$stylish_elephants$Internal_Model$Property,
									'padding',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(_p129),
										A2(
											_elm_lang$core$Basics_ops['++'],
											'px ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p128),
												A2(
													_elm_lang$core$Basics_ops['++'],
													'px ',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(_p126),
														A2(
															_elm_lang$core$Basics_ops['++'],
															'px ',
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(_p127),
																'px')))))))),
								_1: {ctor: '[]'}
							});
					case 'GridTemplateStyle':
						var _p133 = _p120._0;
						var toGridLength = function (x) {
							var _p130 = x;
							switch (_p130.ctor) {
								case 'Px':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(_p130._0),
										'px');
								case 'Content':
									return 'max-content';
								case 'Fill':
									return A2(
										_elm_lang$core$Basics_ops['++'],
										_mdgriffith$stylish_elephants$Internal_Model$intToString(_p130._0),
										'fr');
								default:
									var _p132 = _p130._0;
									var _p131 = {ctor: '_Tuple2', _0: _p132.min, _1: _p132.max};
									if (_p131._0.ctor === 'Nothing') {
										if (_p131._1.ctor === 'Nothing') {
											return A2(
												_elm_lang$core$Basics_ops['++'],
												_mdgriffith$stylish_elephants$Internal_Model$intToString(_p132.portion),
												'fr');
										} else {
											return A2(
												_elm_lang$core$Basics_ops['++'],
												'minmax(',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_mdgriffith$stylish_elephants$Internal_Model$intToString(_p132.portion),
													A2(
														_elm_lang$core$Basics_ops['++'],
														'fr, ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_mdgriffith$stylish_elephants$Internal_Model$intToString(_p131._1._0),
															'px)'))));
										}
									} else {
										if (_p131._1.ctor === 'Nothing') {
											return A2(
												_elm_lang$core$Basics_ops['++'],
												'minmax(',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_mdgriffith$stylish_elephants$Internal_Model$intToString(_p131._0._0),
													A2(
														_elm_lang$core$Basics_ops['++'],
														'px, ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_mdgriffith$stylish_elephants$Internal_Model$intToString(_p132.portion),
															'fr)'))));
										} else {
											return A2(
												_elm_lang$core$Basics_ops['++'],
												'minmax(',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_mdgriffith$stylish_elephants$Internal_Model$intToString(_p131._0._0),
													A2(
														_elm_lang$core$Basics_ops['++'],
														'px, ',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_mdgriffith$stylish_elephants$Internal_Model$intToString(_p131._1._0),
															'px)'))));
										}
									}
							}
						};
						var columns = function (x) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'grid-template-columns: ',
								A2(_elm_lang$core$Basics_ops['++'], x, ';'));
						}(
							A2(
								_elm_lang$core$String$join,
								' ',
								A2(_elm_lang$core$List$map, toGridLength, _p133.columns)));
						var rows = function (x) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'grid-template-rows: ',
								A2(_elm_lang$core$Basics_ops['++'], x, ';'));
						}(
							A2(
								_elm_lang$core$String$join,
								' ',
								A2(_elm_lang$core$List$map, toGridLength, _p133.rows)));
						var gapX = A2(
							_elm_lang$core$Basics_ops['++'],
							'grid-column-gap:',
							A2(
								_elm_lang$core$Basics_ops['++'],
								toGridLength(
									_elm_lang$core$Tuple$first(_p133.spacing)),
								';'));
						var gapY = A2(
							_elm_lang$core$Basics_ops['++'],
							'grid-row-gap:',
							A2(
								_elm_lang$core$Basics_ops['++'],
								toGridLength(
									_elm_lang$core$Tuple$second(_p133.spacing)),
								';'));
						var xSpacing = toGridLength(
							_elm_lang$core$Tuple$first(_p133.spacing));
						var ySpacing = toGridLength(
							_elm_lang$core$Tuple$second(_p133.spacing));
						var msColumns = function (x) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'-ms-grid-columns: ',
								A2(_elm_lang$core$Basics_ops['++'], x, ';'));
						}(
							A2(
								_elm_lang$core$String$join,
								ySpacing,
								A2(_elm_lang$core$List$map, toGridLength, _p133.columns)));
						var msRows = function (x) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								'-ms-grid-rows: ',
								A2(_elm_lang$core$Basics_ops['++'], x, ';'));
						}(
							A2(
								_elm_lang$core$String$join,
								ySpacing,
								A2(_elm_lang$core$List$map, toGridLength, _p133.columns)));
						var $class = A2(
							_elm_lang$core$Basics_ops['++'],
							'.grid-rows-',
							A2(
								_elm_lang$core$Basics_ops['++'],
								A2(
									_elm_lang$core$String$join,
									'-',
									A2(_elm_lang$core$List$map, _mdgriffith$stylish_elephants$Internal_Model$lengthClassName, _p133.rows)),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'-cols-',
									A2(
										_elm_lang$core$Basics_ops['++'],
										A2(
											_elm_lang$core$String$join,
											'-',
											A2(_elm_lang$core$List$map, _mdgriffith$stylish_elephants$Internal_Model$lengthClassName, _p133.columns)),
										A2(
											_elm_lang$core$Basics_ops['++'],
											'-space-x-',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_mdgriffith$stylish_elephants$Internal_Model$lengthClassName(
													_elm_lang$core$Tuple$first(_p133.spacing)),
												A2(
													_elm_lang$core$Basics_ops['++'],
													'-space-y-',
													_mdgriffith$stylish_elephants$Internal_Model$lengthClassName(
														_elm_lang$core$Tuple$second(_p133.spacing)))))))));
						var base = A2(
							_elm_lang$core$Basics_ops['++'],
							$class,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'{',
								A2(
									_elm_lang$core$Basics_ops['++'],
									msColumns,
									A2(_elm_lang$core$Basics_ops['++'], msRows, '}'))));
						var modernGrid = A2(
							_elm_lang$core$Basics_ops['++'],
							$class,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'{',
								A2(
									_elm_lang$core$Basics_ops['++'],
									columns,
									A2(
										_elm_lang$core$Basics_ops['++'],
										rows,
										A2(
											_elm_lang$core$Basics_ops['++'],
											gapX,
											A2(_elm_lang$core$Basics_ops['++'], gapY, '}'))))));
						var supports = A2(
							_elm_lang$core$Basics_ops['++'],
							'@supports (display:grid) {',
							A2(_elm_lang$core$Basics_ops['++'], modernGrid, '}'));
						return A2(_elm_lang$core$Basics_ops['++'], base, supports);
					case 'GridPosition':
						var _p134 = _p120._0;
						var modernPosition = A2(
							_elm_lang$core$String$join,
							' ',
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'grid-row: ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.row),
										A2(
											_elm_lang$core$Basics_ops['++'],
											' / ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.row + _p134.height),
												';')))),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										'grid-column: ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.col),
											A2(
												_elm_lang$core$Basics_ops['++'],
												' / ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.col + _p134.width),
													';')))),
									_1: {ctor: '[]'}
								}
							});
						var msPosition = A2(
							_elm_lang$core$String$join,
							' ',
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Basics_ops['++'],
									'-ms-grid-row: ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.row),
										';')),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										'-ms-grid-row-span: ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.height),
											';')),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$core$Basics_ops['++'],
											'-ms-grid-column: ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.col),
												';')),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$core$Basics_ops['++'],
												'-ms-grid-column-span: ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.width),
													';')),
											_1: {ctor: '[]'}
										}
									}
								}
							});
						var $class = A2(
							_elm_lang$core$Basics_ops['++'],
							'.grid-pos-',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.row),
								A2(
									_elm_lang$core$Basics_ops['++'],
									'-',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.col),
										A2(
											_elm_lang$core$Basics_ops['++'],
											'-',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.width),
												A2(
													_elm_lang$core$Basics_ops['++'],
													'-',
													_mdgriffith$stylish_elephants$Internal_Model$intToString(_p134.height))))))));
						var base = A2(
							_elm_lang$core$Basics_ops['++'],
							$class,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'{',
								A2(_elm_lang$core$Basics_ops['++'], msPosition, '}')));
						var modernGrid = A2(
							_elm_lang$core$Basics_ops['++'],
							$class,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'{',
								A2(_elm_lang$core$Basics_ops['++'], modernPosition, '}')));
						var supports = A2(
							_elm_lang$core$Basics_ops['++'],
							'@supports (display:grid) {',
							A2(_elm_lang$core$Basics_ops['++'], modernGrid, '}'));
						return A2(_elm_lang$core$Basics_ops['++'], base, supports);
					case 'PseudoSelector':
						var renderPseudoRule = function (style) {
							var _p135 = _p120._0;
							switch (_p135.ctor) {
								case 'Focus':
									return A3(
										renderStyleRule,
										style,
										_elm_lang$core$Maybe$Just(_mdgriffith$stylish_elephants$Internal_Model$Focus),
										false);
								case 'Active':
									return A3(
										renderStyleRule,
										style,
										_elm_lang$core$Maybe$Just(_mdgriffith$stylish_elephants$Internal_Model$Active),
										false);
								default:
									var _p136 = options.hover;
									switch (_p136.ctor) {
										case 'NoHover':
											return '';
										case 'AllowHover':
											return A3(
												renderStyleRule,
												style,
												_elm_lang$core$Maybe$Just(_mdgriffith$stylish_elephants$Internal_Model$Hover),
												false);
										default:
											return A3(renderStyleRule, style, _elm_lang$core$Maybe$Nothing, true);
									}
							}
						};
						return A2(
							_elm_lang$core$String$join,
							' ',
							A2(_elm_lang$core$List$map, renderPseudoRule, _p120._1));
					default:
						return '';
				}
			});
		var combine = F2(
			function (style, rendered) {
				return _elm_lang$core$Native_Utils.update(
					rendered,
					{
						rules: A2(
							_elm_lang$core$Basics_ops['++'],
							rendered.rules,
							A3(renderStyleRule, style, _elm_lang$core$Maybe$Nothing, false)),
						topLevel: function () {
							var _p137 = renderTopLevels(style);
							if (_p137.ctor === 'Nothing') {
								return rendered.topLevel;
							} else {
								return A2(_elm_lang$core$Basics_ops['++'], rendered.topLevel, _p137._0);
							}
						}()
					});
			});
		return function (_p138) {
			var _p139 = _p138;
			return A2(_elm_lang$core$Basics_ops['++'], _p139.topLevel, _p139.rules);
		}(
			A3(
				_elm_lang$core$List$foldl,
				combine,
				{rules: '', topLevel: ''},
				stylesheet));
	});
var _mdgriffith$stylish_elephants$Internal_Model$toHtml = F2(
	function (options, el) {
		var _p140 = el;
		switch (_p140.ctor) {
			case 'Unstyled':
				return _p140._0(_mdgriffith$stylish_elephants$Internal_Model$asEl);
			case 'Styled':
				var styleSheet = A2(
					_mdgriffith$stylish_elephants$Internal_Model$toStyleSheetString,
					options,
					_elm_lang$core$Tuple$second(
						A3(
							_elm_lang$core$List$foldr,
							_mdgriffith$stylish_elephants$Internal_Model$reduceStyles,
							{
								ctor: '_Tuple2',
								_0: _elm_lang$core$Set$empty,
								_1: {
									ctor: '::',
									_0: _mdgriffith$stylish_elephants$Internal_Model$renderFocusStyle(options.focus),
									_1: {ctor: '[]'}
								}
							},
							_p140._0.styles)));
				return A2(
					_p140._0.html,
					_elm_lang$core$Maybe$Just(styleSheet),
					_mdgriffith$stylish_elephants$Internal_Model$asEl);
			case 'Text':
				return _mdgriffith$stylish_elephants$Internal_Model$textElement(_p140._0);
			default:
				return _mdgriffith$stylish_elephants$Internal_Model$textElement('');
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$toStyleSheet = F2(
	function (options, styleSheet) {
		return A3(
			_elm_lang$virtual_dom$VirtualDom$node,
			'style',
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(_mdgriffith$stylish_elephants$Internal_Model$toStyleSheetString, options, styleSheet)),
				_1: {ctor: '[]'}
			});
	});
var _mdgriffith$stylish_elephants$Internal_Model$Scale = F3(
	function (a, b, c) {
		return {ctor: 'Scale', _0: a, _1: b, _2: c};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Rotate = F4(
	function (a, b, c, d) {
		return {ctor: 'Rotate', _0: a, _1: b, _2: c, _3: d};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Move = F3(
	function (a, b, c) {
		return {ctor: 'Move', _0: a, _1: b, _2: c};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Filter = function (a) {
	return {ctor: 'Filter', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$BoxShadow = function (a) {
	return {ctor: 'BoxShadow', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$TextShadow = function (a) {
	return {ctor: 'TextShadow', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Nearby = F3(
	function (a, b, c) {
		return {ctor: 'Nearby', _0: a, _1: b, _2: c};
	});
var _mdgriffith$stylish_elephants$Internal_Model$Height = function (a) {
	return {ctor: 'Height', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Width = function (a) {
	return {ctor: 'Width', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$AlignX = function (a) {
	return {ctor: 'AlignX', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$AlignY = function (a) {
	return {ctor: 'AlignY', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$StyleClass = function (a) {
	return {ctor: 'StyleClass', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$adjustParagraphSpacing = function (attrs) {
	var spacing = A3(
		_elm_lang$core$List$foldr,
		F2(
			function (x, acc) {
				var _p141 = acc;
				if (_p141.ctor === 'Just') {
					return _elm_lang$core$Maybe$Just(_p141._0);
				} else {
					var _p142 = x;
					if ((_p142.ctor === 'StyleClass') && (_p142._0.ctor === 'SpacingStyle')) {
						return _elm_lang$core$Maybe$Just(
							{ctor: '_Tuple2', _0: _p142._0._0, _1: _p142._0._1});
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				}
			}),
		_elm_lang$core$Maybe$Nothing,
		attrs);
	var adjust = F2(
		function (_p143, attribute) {
			var _p144 = _p143;
			var _p147 = _p144._1;
			var _p146 = _p144._0;
			var _p145 = attribute;
			if ((_p145.ctor === 'StyleClass') && (_p145._0.ctor === 'PaddingStyle')) {
				return _mdgriffith$stylish_elephants$Internal_Model$StyleClass(
					A4(
						_mdgriffith$stylish_elephants$Internal_Model$PaddingStyle,
						_mdgriffith$stylish_elephants$Internal_Model$floorAtZero(_p145._0._0 - ((_p147 / 2) | 0)),
						_mdgriffith$stylish_elephants$Internal_Model$floorAtZero(_p145._0._1 - ((_p146 / 2) | 0)),
						_mdgriffith$stylish_elephants$Internal_Model$floorAtZero(_p145._0._2 - ((_p147 / 2) | 0)),
						_mdgriffith$stylish_elephants$Internal_Model$floorAtZero(_p145._0._3 - ((_p146 / 2) | 0))));
			} else {
				return attribute;
			}
		});
	var _p148 = spacing;
	if (_p148.ctor === 'Nothing') {
		return attrs;
	} else {
		return A2(
			_elm_lang$core$List$map,
			adjust(
				{ctor: '_Tuple2', _0: _p148._0._0, _1: _p148._0._1}),
			attrs);
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$getSpacingAttribute = F2(
	function (attrs, $default) {
		return function (_p149) {
			var _p150 = _p149;
			return _mdgriffith$stylish_elephants$Internal_Model$StyleClass(
				A2(_mdgriffith$stylish_elephants$Internal_Model$SpacingStyle, _p150._0, _p150._1));
		}(
			A2(
				_elm_lang$core$Maybe$withDefault,
				$default,
				A3(
					_elm_lang$core$List$foldr,
					F2(
						function (x, acc) {
							var _p151 = acc;
							if (_p151.ctor === 'Just') {
								return _elm_lang$core$Maybe$Just(_p151._0);
							} else {
								var _p152 = x;
								if ((_p152.ctor === 'StyleClass') && (_p152._0.ctor === 'SpacingStyle')) {
									return _elm_lang$core$Maybe$Just(
										{ctor: '_Tuple2', _0: _p152._0._0, _1: _p152._0._1});
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}
						}),
					_elm_lang$core$Maybe$Nothing,
					attrs)));
	});
var _mdgriffith$stylish_elephants$Internal_Model$rootStyle = function () {
	var families = {
		ctor: '::',
		_0: _mdgriffith$stylish_elephants$Internal_Model$Typeface('Open Sans'),
		_1: {
			ctor: '::',
			_0: _mdgriffith$stylish_elephants$Internal_Model$Typeface('Helvetica'),
			_1: {
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Internal_Model$Typeface('Verdana'),
				_1: {
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Internal_Model$SansSerif,
					_1: {ctor: '[]'}
				}
			}
		}
	};
	return {
		ctor: '::',
		_0: _mdgriffith$stylish_elephants$Internal_Model$StyleClass(
			A3(
				_mdgriffith$stylish_elephants$Internal_Model$Colored,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'bg-color-',
					_mdgriffith$stylish_elephants$Internal_Model$formatColorClass(
						A4(_elm_lang$core$Color$rgba, 255, 255, 255, 0))),
				'background-color',
				A4(_elm_lang$core$Color$rgba, 255, 255, 255, 0))),
		_1: {
			ctor: '::',
			_0: _mdgriffith$stylish_elephants$Internal_Model$StyleClass(
				A3(
					_mdgriffith$stylish_elephants$Internal_Model$Colored,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'font-color-',
						_mdgriffith$stylish_elephants$Internal_Model$formatColorClass(_elm_lang$core$Color$darkCharcoal)),
					'color',
					_elm_lang$core$Color$darkCharcoal)),
			_1: {
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Internal_Model$StyleClass(
					A3(_mdgriffith$stylish_elephants$Internal_Model$Single, 'font-size-20', 'font-size', '20px')),
				_1: {
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Internal_Model$StyleClass(
						A2(
							_mdgriffith$stylish_elephants$Internal_Model$FontFamily,
							A3(_elm_lang$core$List$foldl, _mdgriffith$stylish_elephants$Internal_Model$renderFontClassName, 'font-', families),
							families)),
					_1: {ctor: '[]'}
				}
			}
		}
	};
}();
var _mdgriffith$stylish_elephants$Internal_Model$Class = F2(
	function (a, b) {
		return {ctor: 'Class', _0: a, _1: b};
	});
var _mdgriffith$stylish_elephants$Internal_Model$class = function (x) {
	return A2(_mdgriffith$stylish_elephants$Internal_Model$Class, x, x);
};
var _mdgriffith$stylish_elephants$Internal_Model$Describe = function (a) {
	return {ctor: 'Describe', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Attr = function (a) {
	return {ctor: 'Attr', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$htmlClass = function (cls) {
	return _mdgriffith$stylish_elephants$Internal_Model$Attr(
		A2(
			_elm_lang$virtual_dom$VirtualDom$property,
			'className',
			_elm_lang$core$Json_Encode$string(cls)));
};
var _mdgriffith$stylish_elephants$Internal_Model$contextClasses = function (context) {
	var _p153 = context;
	switch (_p153.ctor) {
		case 'AsRow':
			return _mdgriffith$stylish_elephants$Internal_Model$htmlClass('se row');
		case 'AsColumn':
			return _mdgriffith$stylish_elephants$Internal_Model$htmlClass('se column');
		case 'AsEl':
			return _mdgriffith$stylish_elephants$Internal_Model$htmlClass('se el');
		case 'AsGrid':
			return _mdgriffith$stylish_elephants$Internal_Model$htmlClass('se grid');
		case 'AsParagraph':
			return _mdgriffith$stylish_elephants$Internal_Model$htmlClass('se paragraph');
		default:
			return _mdgriffith$stylish_elephants$Internal_Model$htmlClass('se page');
	}
};
var _mdgriffith$stylish_elephants$Internal_Model$NoAttribute = {ctor: 'NoAttribute'};
var _mdgriffith$stylish_elephants$Internal_Model$mapAttr = F2(
	function (fn, attr) {
		var _p154 = attr;
		switch (_p154.ctor) {
			case 'NoAttribute':
				return _mdgriffith$stylish_elephants$Internal_Model$NoAttribute;
			case 'Describe':
				return _mdgriffith$stylish_elephants$Internal_Model$Describe(_p154._0);
			case 'AlignX':
				return _mdgriffith$stylish_elephants$Internal_Model$AlignX(_p154._0);
			case 'AlignY':
				return _mdgriffith$stylish_elephants$Internal_Model$AlignY(_p154._0);
			case 'Width':
				return _mdgriffith$stylish_elephants$Internal_Model$Width(_p154._0);
			case 'Height':
				return _mdgriffith$stylish_elephants$Internal_Model$Height(_p154._0);
			case 'Class':
				return A2(_mdgriffith$stylish_elephants$Internal_Model$Class, _p154._0, _p154._1);
			case 'StyleClass':
				return _mdgriffith$stylish_elephants$Internal_Model$StyleClass(_p154._0);
			case 'Nearby':
				return A3(
					_mdgriffith$stylish_elephants$Internal_Model$Nearby,
					_p154._0,
					_p154._1,
					A2(_mdgriffith$stylish_elephants$Internal_Model$map, fn, _p154._2));
			case 'Attr':
				return _mdgriffith$stylish_elephants$Internal_Model$Attr(
					A2(_elm_lang$html$Html_Attributes$map, fn, _p154._0));
			case 'TextShadow':
				return _mdgriffith$stylish_elephants$Internal_Model$TextShadow(_p154._0);
			case 'BoxShadow':
				return _mdgriffith$stylish_elephants$Internal_Model$BoxShadow(_p154._0);
			default:
				return _mdgriffith$stylish_elephants$Internal_Model$Filter(_p154._0);
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		var _p155 = attr;
		switch (_p155.ctor) {
			case 'NoAttribute':
				return _mdgriffith$stylish_elephants$Internal_Model$NoAttribute;
			case 'Describe':
				return _mdgriffith$stylish_elephants$Internal_Model$Describe(_p155._0);
			case 'AlignX':
				return _mdgriffith$stylish_elephants$Internal_Model$AlignX(_p155._0);
			case 'AlignY':
				return _mdgriffith$stylish_elephants$Internal_Model$AlignY(_p155._0);
			case 'Width':
				return _mdgriffith$stylish_elephants$Internal_Model$Width(_p155._0);
			case 'Height':
				return _mdgriffith$stylish_elephants$Internal_Model$Height(_p155._0);
			case 'Class':
				return A2(_mdgriffith$stylish_elephants$Internal_Model$Class, _p155._0, _p155._1);
			case 'StyleClass':
				return _mdgriffith$stylish_elephants$Internal_Model$StyleClass(_p155._0);
			case 'Nearby':
				return A3(
					_mdgriffith$stylish_elephants$Internal_Model$Nearby,
					_p155._0,
					_p155._1,
					A2(_mdgriffith$stylish_elephants$Internal_Model$map, fn, _p155._2));
			case 'Attr':
				return _mdgriffith$stylish_elephants$Internal_Model$Attr(
					A2(_elm_lang$html$Html_Attributes$map, fn, _p155._0));
			case 'TextShadow':
				return _mdgriffith$stylish_elephants$Internal_Model$TextShadow(_p155._0);
			case 'BoxShadow':
				return _mdgriffith$stylish_elephants$Internal_Model$BoxShadow(_p155._0);
			default:
				return _mdgriffith$stylish_elephants$Internal_Model$Filter(_p155._0);
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$removeNever = function (style) {
	return A2(_mdgriffith$stylish_elephants$Internal_Model$mapAttrFromStyle, _elm_lang$core$Basics$never, style);
};
var _mdgriffith$stylish_elephants$Internal_Model$unwrapDecorations = function (attrs) {
	var addShadow = function (styles) {
		var _p156 = styles.shadows;
		if (_p156.ctor === 'Nothing') {
			return styles.styles;
		} else {
			return {
				ctor: '::',
				_0: A2(_mdgriffith$stylish_elephants$Internal_Model$Shadows, _p156._0._0, _p156._0._1),
				_1: styles.styles
			};
		}
	};
	var joinShadows = F2(
		function (x, styles) {
			var _p157 = x;
			if (_p157.ctor === 'Shadows') {
				var _p160 = _p157._1;
				var _p159 = _p157._0;
				var _p158 = styles.shadows;
				if (_p158.ctor === 'Nothing') {
					return _elm_lang$core$Native_Utils.update(
						styles,
						{
							shadows: _elm_lang$core$Maybe$Just(
								{ctor: '_Tuple2', _0: _p159, _1: _p160})
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						styles,
						{
							shadows: _elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple2',
									_0: A2(_elm_lang$core$Basics_ops['++'], _p158._0._0, _p159),
									_1: A2(
										_elm_lang$core$Basics_ops['++'],
										_p158._0._1,
										A2(_elm_lang$core$Basics_ops['++'], ', ', _p160))
								})
						});
				}
			} else {
				return _elm_lang$core$Native_Utils.update(
					styles,
					{
						styles: {ctor: '::', _0: x, _1: styles.styles}
					});
			}
		});
	return addShadow(
		A3(
			_elm_lang$core$List$foldr,
			joinShadows,
			{
				shadows: _elm_lang$core$Maybe$Nothing,
				styles: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$filterMap,
				function (_p161) {
					return _mdgriffith$stylish_elephants$Internal_Model$onlyStyles(
						_mdgriffith$stylish_elephants$Internal_Model$removeNever(_p161));
				},
				attrs)));
};
var _mdgriffith$stylish_elephants$Internal_Model$Button = {ctor: 'Button'};
var _mdgriffith$stylish_elephants$Internal_Model$LiveAssertive = {ctor: 'LiveAssertive'};
var _mdgriffith$stylish_elephants$Internal_Model$LivePolite = {ctor: 'LivePolite'};
var _mdgriffith$stylish_elephants$Internal_Model$Label = function (a) {
	return {ctor: 'Label', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Heading = function (a) {
	return {ctor: 'Heading', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Complementary = {ctor: 'Complementary'};
var _mdgriffith$stylish_elephants$Internal_Model$ContentInfo = {ctor: 'ContentInfo'};
var _mdgriffith$stylish_elephants$Internal_Model$Navigation = {ctor: 'Navigation'};
var _mdgriffith$stylish_elephants$Internal_Model$Main = {ctor: 'Main'};
var _mdgriffith$stylish_elephants$Internal_Model$DropShadow = function (a) {
	return {ctor: 'DropShadow', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Sepia = function (a) {
	return {ctor: 'Sepia', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Saturate = function (a) {
	return {ctor: 'Saturate', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$OpacityFilter = function (a) {
	return {ctor: 'OpacityFilter', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Invert = function (a) {
	return {ctor: 'Invert', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$HueRotate = function (a) {
	return {ctor: 'HueRotate', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Grayscale = function (a) {
	return {ctor: 'Grayscale', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Contrast = function (a) {
	return {ctor: 'Contrast', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Brightness = function (a) {
	return {ctor: 'Brightness', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Blur = function (a) {
	return {ctor: 'Blur', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$FilterUrl = function (a) {
	return {ctor: 'FilterUrl', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$FillBetween = function (a) {
	return {ctor: 'FillBetween', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Fill = function (a) {
	return {ctor: 'Fill', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Content = {ctor: 'Content'};
var _mdgriffith$stylish_elephants$Internal_Model$Px = function (a) {
	return {ctor: 'Px', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$AllAxis = {ctor: 'AllAxis'};
var _mdgriffith$stylish_elephants$Internal_Model$YAxis = {ctor: 'YAxis'};
var _mdgriffith$stylish_elephants$Internal_Model$XAxis = {ctor: 'XAxis'};
var _mdgriffith$stylish_elephants$Internal_Model$Behind = {ctor: 'Behind'};
var _mdgriffith$stylish_elephants$Internal_Model$InFront = {ctor: 'InFront'};
var _mdgriffith$stylish_elephants$Internal_Model$OnLeft = {ctor: 'OnLeft'};
var _mdgriffith$stylish_elephants$Internal_Model$OnRight = {ctor: 'OnRight'};
var _mdgriffith$stylish_elephants$Internal_Model$Below = {ctor: 'Below'};
var _mdgriffith$stylish_elephants$Internal_Model$Above = {ctor: 'Above'};
var _mdgriffith$stylish_elephants$Internal_Model$Embedded = F2(
	function (a, b) {
		return {ctor: 'Embedded', _0: a, _1: b};
	});
var _mdgriffith$stylish_elephants$Internal_Model$NodeName = function (a) {
	return {ctor: 'NodeName', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$addNodeName = F2(
	function (newNode, old) {
		var _p162 = old;
		switch (_p162.ctor) {
			case 'Generic':
				return _mdgriffith$stylish_elephants$Internal_Model$NodeName(newNode);
			case 'NodeName':
				return A2(_mdgriffith$stylish_elephants$Internal_Model$Embedded, _p162._0, newNode);
			default:
				return A2(_mdgriffith$stylish_elephants$Internal_Model$Embedded, _p162._0, _p162._1);
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$gatherAttributes = F2(
	function (attr, gathered) {
		var styleName = function (name) {
			return A2(_elm_lang$core$Basics_ops['++'], '.', name);
		};
		var formatStyleClass = function (style) {
			var _p163 = style;
			switch (_p163.ctor) {
				case 'Transform':
					return _mdgriffith$stylish_elephants$Internal_Model$Transform(_p163._0);
				case 'Shadows':
					return A2(_mdgriffith$stylish_elephants$Internal_Model$Shadows, _p163._0, _p163._1);
				case 'PseudoSelector':
					return A2(
						_mdgriffith$stylish_elephants$Internal_Model$PseudoSelector,
						_p163._0,
						A2(_elm_lang$core$List$map, formatStyleClass, _p163._1));
				case 'Style':
					return A2(
						_mdgriffith$stylish_elephants$Internal_Model$Style,
						styleName(_p163._0),
						_p163._1);
				case 'Single':
					return A3(
						_mdgriffith$stylish_elephants$Internal_Model$Single,
						styleName(_p163._0),
						_p163._1,
						_p163._2);
				case 'Colored':
					return A3(
						_mdgriffith$stylish_elephants$Internal_Model$Colored,
						styleName(_p163._0),
						_p163._1,
						_p163._2);
				case 'SpacingStyle':
					return A2(_mdgriffith$stylish_elephants$Internal_Model$SpacingStyle, _p163._0, _p163._1);
				case 'PaddingStyle':
					return A4(_mdgriffith$stylish_elephants$Internal_Model$PaddingStyle, _p163._0, _p163._1, _p163._2, _p163._3);
				case 'GridTemplateStyle':
					return _mdgriffith$stylish_elephants$Internal_Model$GridTemplateStyle(_p163._0);
				case 'GridPosition':
					return _mdgriffith$stylish_elephants$Internal_Model$GridPosition(_p163._0);
				case 'LineHeight':
					return _mdgriffith$stylish_elephants$Internal_Model$LineHeight(_p163._0);
				case 'FontFamily':
					return A2(_mdgriffith$stylish_elephants$Internal_Model$FontFamily, _p163._0, _p163._1);
				case 'FontSize':
					return _mdgriffith$stylish_elephants$Internal_Model$FontSize(_p163._0);
				default:
					return A2(_mdgriffith$stylish_elephants$Internal_Model$Transparency, _p163._0, _p163._1);
			}
		};
		var className = function (name) {
			return A2(
				_elm_lang$virtual_dom$VirtualDom$property,
				'className',
				_elm_lang$core$Json_Encode$string(name));
		};
		var _p164 = attr;
		switch (_p164.ctor) {
			case 'NoAttribute':
				return gathered;
			case 'Class':
				var _p165 = _p164._0;
				return A2(_elm_lang$core$Set$member, _p165, gathered.has) ? gathered : _elm_lang$core$Native_Utils.update(
					gathered,
					{
						attributes: {
							ctor: '::',
							_0: className(_p164._1),
							_1: gathered.attributes
						},
						has: A2(_elm_lang$core$Set$insert, _p165, gathered.has)
					});
			case 'Attr':
				return _elm_lang$core$Native_Utils.update(
					gathered,
					{
						attributes: {ctor: '::', _0: _p164._0, _1: gathered.attributes}
					});
			case 'StyleClass':
				var _p171 = _p164._0;
				var addNormalStyle = F2(
					function (styleProp, gatheredProps) {
						var key = _mdgriffith$stylish_elephants$Internal_Model$styleKey(styleProp);
						return A2(_elm_lang$core$Set$member, key, gatheredProps.has) ? gatheredProps : _elm_lang$core$Native_Utils.update(
							gatheredProps,
							{
								attributes: function () {
									var _p166 = styleProp;
									if (_p166.ctor === 'PseudoSelector') {
										return {
											ctor: '::',
											_0: A2(
												_elm_lang$virtual_dom$VirtualDom$property,
												'className',
												_elm_lang$core$Json_Encode$string('transition')),
											_1: {
												ctor: '::',
												_0: className(
													_mdgriffith$stylish_elephants$Internal_Model$getStyleName(styleProp)),
												_1: gatheredProps.attributes
											}
										};
									} else {
										return {
											ctor: '::',
											_0: className(
												_mdgriffith$stylish_elephants$Internal_Model$getStyleName(styleProp)),
											_1: gatheredProps.attributes
										};
									}
								}(),
								styles: {
									ctor: '::',
									_0: formatStyleClass(styleProp),
									_1: gatheredProps.styles
								},
								has: A2(_elm_lang$core$Set$insert, key, gatheredProps.has)
							});
					});
				var _p167 = _p171;
				switch (_p167.ctor) {
					case 'Transform':
						return A3(_mdgriffith$stylish_elephants$Internal_Model$stackOn, _elm_lang$core$Maybe$Nothing, _p167._0, gathered);
					case 'PseudoSelector':
						var _p170 = _p167._0;
						var forTransforms = function (attr) {
							var _p168 = attr;
							if (_p168.ctor === 'Transform') {
								return _elm_lang$core$Maybe$Just(_p168._0);
							} else {
								return _elm_lang$core$Maybe$Nothing;
							}
						};
						var _p169 = A2(
							_elm_lang$core$List$partition,
							function (x) {
								return !_elm_lang$core$Native_Utils.eq(
									forTransforms(x),
									_elm_lang$core$Maybe$Nothing);
							},
							_p167._1);
						var transformationProps = _p169._0;
						var otherProps = _p169._1;
						var withTransforms = A3(
							_elm_lang$core$List$foldr,
							_mdgriffith$stylish_elephants$Internal_Model$stackOn(
								_elm_lang$core$Maybe$Just(_p170)),
							gathered,
							A2(_elm_lang$core$List$filterMap, forTransforms, transformationProps));
						return A2(
							addNormalStyle,
							A2(_mdgriffith$stylish_elephants$Internal_Model$PseudoSelector, _p170, otherProps),
							withTransforms);
					default:
						return A2(addNormalStyle, _p171, gathered);
				}
			case 'Width':
				var _p176 = _p164._0;
				if (_elm_lang$core$Native_Utils.eq(gathered.width, _elm_lang$core$Maybe$Nothing)) {
					var _p172 = _p176;
					switch (_p172.ctor) {
						case 'Px':
							var _p173 = _p172._0;
							return _elm_lang$core$Native_Utils.update(
								gathered,
								{
									width: _elm_lang$core$Maybe$Just(_p176),
									attributes: {
										ctor: '::',
										_0: className(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'width-exact width-px-',
												_elm_lang$core$Basics$toString(_p173))),
										_1: gathered.attributes
									},
									styles: {
										ctor: '::',
										_0: A3(
											_mdgriffith$stylish_elephants$Internal_Model$Single,
											styleName(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'width-px-',
													_elm_lang$core$Basics$toString(_p173))),
											'width',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p173),
												'px')),
										_1: gathered.styles
									}
								});
						case 'Content':
							return _elm_lang$core$Native_Utils.update(
								gathered,
								{
									width: _elm_lang$core$Maybe$Just(_p176),
									attributes: {
										ctor: '::',
										_0: className('width-content'),
										_1: gathered.attributes
									}
								});
						case 'Fill':
							var _p174 = _p172._0;
							return _elm_lang$core$Native_Utils.eq(_p174, 1) ? _elm_lang$core$Native_Utils.update(
								gathered,
								{
									width: _elm_lang$core$Maybe$Just(_p176),
									attributes: {
										ctor: '::',
										_0: className('width-fill'),
										_1: gathered.attributes
									}
								}) : _elm_lang$core$Native_Utils.update(
								gathered,
								{
									width: _elm_lang$core$Maybe$Just(_p176),
									attributes: {
										ctor: '::',
										_0: className(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'width-fill-portion width-fill-',
												_elm_lang$core$Basics$toString(_p174))),
										_1: gathered.attributes
									},
									styles: {
										ctor: '::',
										_0: A3(
											_mdgriffith$stylish_elephants$Internal_Model$Single,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'.se.row > ',
												styleName(
													A2(
														_elm_lang$core$Basics_ops['++'],
														'width-fill-',
														_elm_lang$core$Basics$toString(_p174)))),
											'flex-grow',
											_elm_lang$core$Basics$toString(_p174 * 100000)),
										_1: gathered.styles
									}
								});
						default:
							var _p175 = _p172._0;
							var base = _elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple2',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										'width-fill-between width-fill-',
										_elm_lang$core$Basics$toString(_p175.portion)),
									_1: A3(
										_mdgriffith$stylish_elephants$Internal_Model$Single,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'.se.row > ',
											styleName(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'width-fill-',
													_elm_lang$core$Basics$toString(_p175.portion)))),
										'flex-grow',
										_elm_lang$core$Basics$toString(_p175.portion * 100000))
								});
							var renderMax = function (px) {
								return {
									ctor: '_Tuple2',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										'max-width-',
										_mdgriffith$stylish_elephants$Internal_Model$intToString(px)),
									_1: A3(
										_mdgriffith$stylish_elephants$Internal_Model$Single,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'.max-width-',
											_mdgriffith$stylish_elephants$Internal_Model$intToString(px)),
										'max-width',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_mdgriffith$stylish_elephants$Internal_Model$intToString(px),
											'px'))
								};
							};
							var renderMin = function (px) {
								return {
									ctor: '_Tuple2',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										'min-width-',
										_mdgriffith$stylish_elephants$Internal_Model$intToString(px)),
									_1: A3(
										_mdgriffith$stylish_elephants$Internal_Model$Single,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'.min-width-',
											_mdgriffith$stylish_elephants$Internal_Model$intToString(px)),
										'min-width',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_mdgriffith$stylish_elephants$Internal_Model$intToString(px),
											'px'))
								};
							};
							var maximum = A2(_elm_lang$core$Maybe$map, renderMax, _p175.max);
							var minimum = A2(_elm_lang$core$Maybe$map, renderMin, _p175.min);
							var classes = A2(
								_elm_lang$core$String$join,
								' ',
								A2(
									_elm_lang$core$List$filterMap,
									_elm_lang$core$Maybe$map(_elm_lang$core$Tuple$first),
									{
										ctor: '::',
										_0: minimum,
										_1: {
											ctor: '::',
											_0: maximum,
											_1: {
												ctor: '::',
												_0: base,
												_1: {ctor: '[]'}
											}
										}
									}));
							var styles = A2(
								_elm_lang$core$List$filterMap,
								_elm_lang$core$Maybe$map(_elm_lang$core$Tuple$second),
								{
									ctor: '::',
									_0: minimum,
									_1: {
										ctor: '::',
										_0: maximum,
										_1: {
											ctor: '::',
											_0: base,
											_1: {ctor: '[]'}
										}
									}
								});
							return _elm_lang$core$Native_Utils.update(
								gathered,
								{
									width: _elm_lang$core$Maybe$Just(_p176),
									attributes: {
										ctor: '::',
										_0: className(classes),
										_1: gathered.attributes
									},
									styles: A2(_elm_lang$core$Basics_ops['++'], styles, gathered.styles)
								});
					}
				} else {
					return gathered;
				}
			case 'Height':
				var _p181 = _p164._0;
				if (_elm_lang$core$Native_Utils.eq(gathered.height, _elm_lang$core$Maybe$Nothing)) {
					var _p177 = _p181;
					switch (_p177.ctor) {
						case 'Px':
							var _p178 = _p177._0;
							return _elm_lang$core$Native_Utils.update(
								gathered,
								{
									height: _elm_lang$core$Maybe$Just(_p181),
									attributes: {
										ctor: '::',
										_0: className(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'height-px-',
												_elm_lang$core$Basics$toString(_p178))),
										_1: gathered.attributes
									},
									styles: {
										ctor: '::',
										_0: A3(
											_mdgriffith$stylish_elephants$Internal_Model$Single,
											styleName(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'height-px-',
													_elm_lang$core$Basics$toString(_p178))),
											'height',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p178),
												'px')),
										_1: gathered.styles
									}
								});
						case 'Content':
							return _elm_lang$core$Native_Utils.update(
								gathered,
								{
									height: _elm_lang$core$Maybe$Just(_p181),
									attributes: {
										ctor: '::',
										_0: className('height-content'),
										_1: gathered.attributes
									}
								});
						case 'Fill':
							var _p179 = _p177._0;
							return _elm_lang$core$Native_Utils.eq(_p179, 1) ? _elm_lang$core$Native_Utils.update(
								gathered,
								{
									height: _elm_lang$core$Maybe$Just(_p181),
									attributes: {
										ctor: '::',
										_0: className('height-fill'),
										_1: gathered.attributes
									}
								}) : _elm_lang$core$Native_Utils.update(
								gathered,
								{
									height: _elm_lang$core$Maybe$Just(_p181),
									attributes: {
										ctor: '::',
										_0: className(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'height-fill-portion height-fill-',
												_elm_lang$core$Basics$toString(_p179))),
										_1: gathered.attributes
									},
									styles: {
										ctor: '::',
										_0: A3(
											_mdgriffith$stylish_elephants$Internal_Model$Single,
											A2(
												_elm_lang$core$Basics_ops['++'],
												'.se.column > ',
												styleName(
													A2(
														_elm_lang$core$Basics_ops['++'],
														'height-fill-',
														_elm_lang$core$Basics$toString(_p179)))),
											'flex-grow',
											_elm_lang$core$Basics$toString(_p179 * 100000)),
										_1: gathered.styles
									}
								});
						default:
							var _p180 = _p177._0;
							var base = _elm_lang$core$Maybe$Just(
								{
									ctor: '_Tuple2',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										'height-fill-between height-fill-',
										_elm_lang$core$Basics$toString(_p180.portion)),
									_1: A3(
										_mdgriffith$stylish_elephants$Internal_Model$Single,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'.se.column > ',
											styleName(
												A2(
													_elm_lang$core$Basics_ops['++'],
													'height-fill-',
													_elm_lang$core$Basics$toString(_p180.portion)))),
										'flex-grow',
										_elm_lang$core$Basics$toString(_p180.portion * 100000))
								});
							var renderMax = function (px) {
								return {
									ctor: '_Tuple2',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										'.max-height-',
										_mdgriffith$stylish_elephants$Internal_Model$intToString(px)),
									_1: A3(
										_mdgriffith$stylish_elephants$Internal_Model$Single,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'.max-height-',
											_mdgriffith$stylish_elephants$Internal_Model$intToString(px)),
										'max-height',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_mdgriffith$stylish_elephants$Internal_Model$intToString(px),
											'px'))
								};
							};
							var renderMin = function (px) {
								return {
									ctor: '_Tuple2',
									_0: A2(
										_elm_lang$core$Basics_ops['++'],
										'min-height-',
										_mdgriffith$stylish_elephants$Internal_Model$intToString(px)),
									_1: A3(
										_mdgriffith$stylish_elephants$Internal_Model$Single,
										A2(
											_elm_lang$core$Basics_ops['++'],
											'.min-height-',
											_mdgriffith$stylish_elephants$Internal_Model$intToString(px)),
										'min-height',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_mdgriffith$stylish_elephants$Internal_Model$intToString(px),
											'px'))
								};
							};
							var maximum = A2(_elm_lang$core$Maybe$map, renderMax, _p180.max);
							var minimum = A2(_elm_lang$core$Maybe$map, renderMin, _p180.min);
							var classes = A2(
								_elm_lang$core$String$join,
								' ',
								A2(
									_elm_lang$core$List$filterMap,
									_elm_lang$core$Maybe$map(_elm_lang$core$Tuple$first),
									{
										ctor: '::',
										_0: minimum,
										_1: {
											ctor: '::',
											_0: maximum,
											_1: {
												ctor: '::',
												_0: base,
												_1: {ctor: '[]'}
											}
										}
									}));
							var styles = A2(
								_elm_lang$core$List$filterMap,
								_elm_lang$core$Maybe$map(_elm_lang$core$Tuple$second),
								{
									ctor: '::',
									_0: minimum,
									_1: {
										ctor: '::',
										_0: maximum,
										_1: {
											ctor: '::',
											_0: base,
											_1: {ctor: '[]'}
										}
									}
								});
							return _elm_lang$core$Native_Utils.update(
								gathered,
								{
									height: _elm_lang$core$Maybe$Just(_p181),
									attributes: {
										ctor: '::',
										_0: className(classes),
										_1: gathered.attributes
									},
									styles: A2(_elm_lang$core$Basics_ops['++'], styles, gathered.styles)
								});
					}
				} else {
					return gathered;
				}
			case 'Describe':
				var _p182 = _p164._0;
				switch (_p182.ctor) {
					case 'Main':
						return _elm_lang$core$Native_Utils.update(
							gathered,
							{
								node: A2(_mdgriffith$stylish_elephants$Internal_Model$addNodeName, 'main', gathered.node)
							});
					case 'Navigation':
						return _elm_lang$core$Native_Utils.update(
							gathered,
							{
								node: A2(_mdgriffith$stylish_elephants$Internal_Model$addNodeName, 'nav', gathered.node)
							});
					case 'ContentInfo':
						return _elm_lang$core$Native_Utils.update(
							gathered,
							{
								node: A2(_mdgriffith$stylish_elephants$Internal_Model$addNodeName, 'footer', gathered.node)
							});
					case 'Complementary':
						return _elm_lang$core$Native_Utils.update(
							gathered,
							{
								node: A2(_mdgriffith$stylish_elephants$Internal_Model$addNodeName, 'aside', gathered.node)
							});
					case 'Heading':
						var _p183 = _p182._0;
						return (_elm_lang$core$Native_Utils.cmp(_p183, 1) < 1) ? _elm_lang$core$Native_Utils.update(
							gathered,
							{
								node: A2(_mdgriffith$stylish_elephants$Internal_Model$addNodeName, 'h1', gathered.node)
							}) : ((_elm_lang$core$Native_Utils.cmp(_p183, 7) < 0) ? _elm_lang$core$Native_Utils.update(
							gathered,
							{
								node: A2(
									_mdgriffith$stylish_elephants$Internal_Model$addNodeName,
									A2(
										_elm_lang$core$Basics_ops['++'],
										'h',
										_elm_lang$core$Basics$toString(_p183)),
									gathered.node)
							}) : _elm_lang$core$Native_Utils.update(
							gathered,
							{
								node: A2(_mdgriffith$stylish_elephants$Internal_Model$addNodeName, 'h6', gathered.node)
							}));
					case 'Button':
						return _elm_lang$core$Native_Utils.update(
							gathered,
							{
								attributes: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'button'),
									_1: gathered.attributes
								}
							});
					case 'Label':
						return _elm_lang$core$Native_Utils.update(
							gathered,
							{
								attributes: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-label', _p182._0),
									_1: gathered.attributes
								}
							});
					case 'LivePolite':
						return _elm_lang$core$Native_Utils.update(
							gathered,
							{
								attributes: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-live', 'polite'),
									_1: gathered.attributes
								}
							});
					default:
						return _elm_lang$core$Native_Utils.update(
							gathered,
							{
								attributes: {
									ctor: '::',
									_0: A2(_elm_lang$html$Html_Attributes$attribute, 'aria-live', 'assertive'),
									_1: gathered.attributes
								}
							});
				}
			case 'Nearby':
				var _p189 = _p164._1;
				var _p188 = _p164._0;
				var _p187 = _p164._2;
				var styles = function () {
					var _p184 = _p187;
					switch (_p184.ctor) {
						case 'Empty':
							return _elm_lang$core$Maybe$Nothing;
						case 'Text':
							return _elm_lang$core$Maybe$Nothing;
						case 'Unstyled':
							return _elm_lang$core$Maybe$Nothing;
						default:
							return _elm_lang$core$Maybe$Just(
								A2(_elm_lang$core$Basics_ops['++'], gathered.styles, _p184._0.styles));
					}
				}();
				return _elm_lang$core$Native_Utils.update(
					gathered,
					{
						styles: function () {
							var _p185 = styles;
							if (_p185.ctor === 'Nothing') {
								return gathered.styles;
							} else {
								return _p185._0;
							}
						}(),
						nearbys: function () {
							var _p186 = gathered.nearbys;
							if (_p186.ctor === 'Nothing') {
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '::',
										_0: {ctor: '_Tuple3', _0: _p188, _1: _p189, _2: _p187},
										_1: {ctor: '[]'}
									});
							} else {
								return _elm_lang$core$Maybe$Just(
									{
										ctor: '::',
										_0: {ctor: '_Tuple3', _0: _p188, _1: _p189, _2: _p187},
										_1: _p186._0
									});
							}
						}()
					});
			case 'AlignX':
				var _p191 = _p164._0;
				var _p190 = gathered.alignment;
				if (_p190.ctor === 'Unaligned') {
					return _elm_lang$core$Native_Utils.update(
						gathered,
						{
							attributes: {
								ctor: '::',
								_0: className(
									_mdgriffith$stylish_elephants$Internal_Model$alignXName(_p191)),
								_1: gathered.attributes
							},
							alignment: A2(
								_mdgriffith$stylish_elephants$Internal_Model$Aligned,
								_elm_lang$core$Maybe$Just(_p191),
								_elm_lang$core$Maybe$Nothing)
						});
				} else {
					if (_p190._0.ctor === 'Just') {
						return gathered;
					} else {
						return _elm_lang$core$Native_Utils.update(
							gathered,
							{
								attributes: {
									ctor: '::',
									_0: className(
										_mdgriffith$stylish_elephants$Internal_Model$alignXName(_p191)),
									_1: gathered.attributes
								},
								alignment: A2(
									_mdgriffith$stylish_elephants$Internal_Model$Aligned,
									_elm_lang$core$Maybe$Just(_p191),
									_p190._1)
							});
					}
				}
			case 'AlignY':
				var _p193 = _p164._0;
				var _p192 = gathered.alignment;
				if (_p192.ctor === 'Unaligned') {
					return _elm_lang$core$Native_Utils.update(
						gathered,
						{
							attributes: {
								ctor: '::',
								_0: className(
									_mdgriffith$stylish_elephants$Internal_Model$alignYName(_p193)),
								_1: gathered.attributes
							},
							alignment: A2(
								_mdgriffith$stylish_elephants$Internal_Model$Aligned,
								_elm_lang$core$Maybe$Nothing,
								_elm_lang$core$Maybe$Just(_p193))
						});
				} else {
					if (_p192._1.ctor === 'Just') {
						return gathered;
					} else {
						return _elm_lang$core$Native_Utils.update(
							gathered,
							{
								attributes: {
									ctor: '::',
									_0: className(
										_mdgriffith$stylish_elephants$Internal_Model$alignYName(_p193)),
									_1: gathered.attributes
								},
								alignment: A2(
									_mdgriffith$stylish_elephants$Internal_Model$Aligned,
									_p192._0,
									_elm_lang$core$Maybe$Just(_p193))
							});
					}
				}
			case 'Filter':
				var _p195 = _p164._0;
				var _p194 = gathered.filters;
				if (_p194.ctor === 'Nothing') {
					return _elm_lang$core$Native_Utils.update(
						gathered,
						{
							filters: _elm_lang$core$Maybe$Just(
								_mdgriffith$stylish_elephants$Internal_Model$filterName(_p195))
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						gathered,
						{
							filters: _elm_lang$core$Maybe$Just(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_mdgriffith$stylish_elephants$Internal_Model$filterName(_p195),
									A2(_elm_lang$core$Basics_ops['++'], ' ', _p194._0)))
						});
				}
			case 'BoxShadow':
				var _p197 = _p164._0;
				var _p196 = gathered.boxShadows;
				if (_p196.ctor === 'Nothing') {
					return _elm_lang$core$Native_Utils.update(
						gathered,
						{
							boxShadows: _elm_lang$core$Maybe$Just(
								_mdgriffith$stylish_elephants$Internal_Model$formatBoxShadow(_p197))
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						gathered,
						{
							boxShadows: _elm_lang$core$Maybe$Just(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_mdgriffith$stylish_elephants$Internal_Model$formatBoxShadow(_p197),
									A2(_elm_lang$core$Basics_ops['++'], ', ', _p196._0)))
						});
				}
			default:
				var _p199 = _p164._0;
				var _p198 = gathered.textShadows;
				if (_p198.ctor === 'Nothing') {
					return _elm_lang$core$Native_Utils.update(
						gathered,
						{
							textShadows: _elm_lang$core$Maybe$Just(
								_mdgriffith$stylish_elephants$Internal_Model$formatTextShadow(_p199))
						});
				} else {
					return _elm_lang$core$Native_Utils.update(
						gathered,
						{
							textShadows: _elm_lang$core$Maybe$Just(
								A2(
									_elm_lang$core$Basics_ops['++'],
									_mdgriffith$stylish_elephants$Internal_Model$formatTextShadow(_p199),
									A2(_elm_lang$core$Basics_ops['++'], ', ', _p198._0)))
						});
				}
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$Generic = {ctor: 'Generic'};
var _mdgriffith$stylish_elephants$Internal_Model$initGathered = function (maybeNodeName) {
	return {
		attributes: {ctor: '[]'},
		styles: {ctor: '[]'},
		width: _elm_lang$core$Maybe$Nothing,
		height: _elm_lang$core$Maybe$Nothing,
		alignment: _mdgriffith$stylish_elephants$Internal_Model$Unaligned,
		node: function () {
			var _p200 = maybeNodeName;
			if (_p200.ctor === 'Nothing') {
				return _mdgriffith$stylish_elephants$Internal_Model$Generic;
			} else {
				return _mdgriffith$stylish_elephants$Internal_Model$NodeName(_p200._0);
			}
		}(),
		nearbys: _elm_lang$core$Maybe$Nothing,
		transform: _elm_lang$core$Maybe$Nothing,
		filters: _elm_lang$core$Maybe$Nothing,
		boxShadows: _elm_lang$core$Maybe$Nothing,
		textShadows: _elm_lang$core$Maybe$Nothing,
		has: _elm_lang$core$Set$empty
	};
};
var _mdgriffith$stylish_elephants$Internal_Model$OnlyDynamic = function (a) {
	return {ctor: 'OnlyDynamic', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$StaticRootAndDynamic = function (a) {
	return {ctor: 'StaticRootAndDynamic', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$NoStyleSheet = {ctor: 'NoStyleSheet'};
var _mdgriffith$stylish_elephants$Internal_Model$noStyleSheet = _mdgriffith$stylish_elephants$Internal_Model$NoStyleSheet;
var _mdgriffith$stylish_elephants$Internal_Model$Keyed = function (a) {
	return {ctor: 'Keyed', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$Unkeyed = function (a) {
	return {ctor: 'Unkeyed', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$asElement = F4(
	function (embedMode, children, context, rendered) {
		var gatherKeyed = F2(
			function (_p202, _p201) {
				var _p203 = _p202;
				var _p210 = _p203._0;
				var _p204 = _p201;
				var _p209 = _p204._0;
				var _p208 = _p204._1;
				var _p205 = _p203._1;
				switch (_p205.ctor) {
					case 'Unstyled':
						return {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _p210,
									_1: _p205._0(context)
								},
								_1: _p209
							},
							_1: _p208
						};
					case 'Styled':
						var _p206 = _p205._0;
						return {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _p210,
									_1: A2(_p206.html, _elm_lang$core$Maybe$Nothing, context)
								},
								_1: _p209
							},
							_1: A2(_elm_lang$core$Basics_ops['++'], _p206.styles, _p208)
						};
					case 'Text':
						var _p207 = _p205._0;
						return (_elm_lang$core$Native_Utils.eq(
							rendered.width,
							_elm_lang$core$Maybe$Just(_mdgriffith$stylish_elephants$Internal_Model$Content)) && (_elm_lang$core$Native_Utils.eq(
							rendered.height,
							_elm_lang$core$Maybe$Just(_mdgriffith$stylish_elephants$Internal_Model$Content)) && _elm_lang$core$Native_Utils.eq(context, _mdgriffith$stylish_elephants$Internal_Model$asEl))) ? {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _p210,
									_1: _elm_lang$html$Html$text(_p207)
								},
								_1: _p209
							},
							_1: _p208
						} : {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: _p210,
									_1: _mdgriffith$stylish_elephants$Internal_Model$textElement(_p207)
								},
								_1: _p209
							},
							_1: _p208
						};
					default:
						return {ctor: '_Tuple2', _0: _p209, _1: _p208};
				}
			});
		var gather = F2(
			function (child, _p211) {
				var _p212 = _p211;
				var _p217 = _p212._0;
				var _p216 = _p212._1;
				var _p213 = child;
				switch (_p213.ctor) {
					case 'Unstyled':
						return {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: _p213._0(context),
								_1: _p217
							},
							_1: _p216
						};
					case 'Styled':
						var _p214 = _p213._0;
						return {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: A2(_p214.html, _elm_lang$core$Maybe$Nothing, context),
								_1: _p217
							},
							_1: A2(_elm_lang$core$Basics_ops['++'], _p214.styles, _p216)
						};
					case 'Text':
						var _p215 = _p213._0;
						return _elm_lang$core$Native_Utils.eq(context, _mdgriffith$stylish_elephants$Internal_Model$asEl) ? {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: _mdgriffith$stylish_elephants$Internal_Model$textElementFill(_p215),
								_1: _p217
							},
							_1: _p216
						} : {
							ctor: '_Tuple2',
							_0: {
								ctor: '::',
								_0: _mdgriffith$stylish_elephants$Internal_Model$textElement(_p215),
								_1: _p217
							},
							_1: _p216
						};
					default:
						return {ctor: '_Tuple2', _0: _p217, _1: _p216};
				}
			});
		var _p218 = function () {
			var _p219 = children;
			if (_p219.ctor === 'Keyed') {
				return A2(
					_elm_lang$core$Tuple$mapFirst,
					_mdgriffith$stylish_elephants$Internal_Model$Keyed,
					A3(
						_elm_lang$core$List$foldr,
						gatherKeyed,
						{
							ctor: '_Tuple2',
							_0: {ctor: '[]'},
							_1: rendered.styles
						},
						_p219._0));
			} else {
				return A2(
					_elm_lang$core$Tuple$mapFirst,
					_mdgriffith$stylish_elephants$Internal_Model$Unkeyed,
					A3(
						_elm_lang$core$List$foldr,
						gather,
						{
							ctor: '_Tuple2',
							_0: {ctor: '[]'},
							_1: rendered.styles
						},
						_p219._0));
			}
		}();
		var htmlChildren = _p218._0;
		var styleChildren = _p218._1;
		var _p220 = embedMode;
		switch (_p220.ctor) {
			case 'NoStyleSheet':
				var renderedChildren = function () {
					var _p221 = A2(_elm_lang$core$Maybe$map, _mdgriffith$stylish_elephants$Internal_Model$renderNearbyGroupAbsolute, rendered.nearbys);
					if (_p221.ctor === 'Nothing') {
						return htmlChildren;
					} else {
						var _p223 = _p221._0;
						var _p222 = htmlChildren;
						if (_p222.ctor === 'Keyed') {
							return _mdgriffith$stylish_elephants$Internal_Model$Keyed(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'nearby-elements-pls', _1: _p223},
									_1: _p222._0
								});
						} else {
							return _mdgriffith$stylish_elephants$Internal_Model$Unkeyed(
								{ctor: '::', _0: _p223, _1: _p222._0});
						}
					}
				}();
				var _p224 = styleChildren;
				if (_p224.ctor === '[]') {
					return _mdgriffith$stylish_elephants$Internal_Model$Unstyled(
						A3(_mdgriffith$stylish_elephants$Internal_Model$renderNode, rendered, renderedChildren, _elm_lang$core$Maybe$Nothing));
				} else {
					return _mdgriffith$stylish_elephants$Internal_Model$Styled(
						{
							styles: styleChildren,
							html: A2(_mdgriffith$stylish_elephants$Internal_Model$renderNode, rendered, renderedChildren)
						});
				}
			case 'StaticRootAndDynamic':
				var _p229 = _p220._0;
				var styles = _elm_lang$core$Tuple$second(
					A3(
						_elm_lang$core$List$foldr,
						_mdgriffith$stylish_elephants$Internal_Model$reduceStyles,
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Set$empty,
							_1: {
								ctor: '::',
								_0: _mdgriffith$stylish_elephants$Internal_Model$renderFocusStyle(_p229.focus),
								_1: {ctor: '[]'}
							}
						},
						styleChildren));
				var renderedChildren = function () {
					var _p225 = A2(_elm_lang$core$Maybe$map, _mdgriffith$stylish_elephants$Internal_Model$renderNearbyGroupAbsolute, rendered.nearbys);
					if (_p225.ctor === 'Nothing') {
						var _p226 = htmlChildren;
						if (_p226.ctor === 'Keyed') {
							return _mdgriffith$stylish_elephants$Internal_Model$Keyed(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'static-stylesheet', _1: _mdgriffith$stylish_elephants$Internal_Style$rulesElement},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'dynamic-stylesheet',
											_1: A2(_mdgriffith$stylish_elephants$Internal_Model$toStyleSheet, _p229, styles)
										},
										_1: _p226._0
									}
								});
						} else {
							return _mdgriffith$stylish_elephants$Internal_Model$Unkeyed(
								{
									ctor: '::',
									_0: _mdgriffith$stylish_elephants$Internal_Style$rulesElement,
									_1: {
										ctor: '::',
										_0: A2(_mdgriffith$stylish_elephants$Internal_Model$toStyleSheet, _p229, styles),
										_1: _p226._0
									}
								});
						}
					} else {
						var _p228 = _p225._0;
						var _p227 = htmlChildren;
						if (_p227.ctor === 'Keyed') {
							return _mdgriffith$stylish_elephants$Internal_Model$Keyed(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'static-stylesheet', _1: _mdgriffith$stylish_elephants$Internal_Style$rulesElement},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'dynamic-stylesheet',
											_1: A2(_mdgriffith$stylish_elephants$Internal_Model$toStyleSheet, _p229, styles)
										},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'nearby-elements-pls', _1: _p228},
											_1: _p227._0
										}
									}
								});
						} else {
							return _mdgriffith$stylish_elephants$Internal_Model$Unkeyed(
								{
									ctor: '::',
									_0: _mdgriffith$stylish_elephants$Internal_Style$rulesElement,
									_1: {
										ctor: '::',
										_0: A2(_mdgriffith$stylish_elephants$Internal_Model$toStyleSheet, _p229, styles),
										_1: {ctor: '::', _0: _p228, _1: _p227._0}
									}
								});
						}
					}
				}();
				return _mdgriffith$stylish_elephants$Internal_Model$Unstyled(
					A3(_mdgriffith$stylish_elephants$Internal_Model$renderNode, rendered, renderedChildren, _elm_lang$core$Maybe$Nothing));
			default:
				var _p234 = _p220._0;
				var styles = _elm_lang$core$Tuple$second(
					A3(
						_elm_lang$core$List$foldr,
						_mdgriffith$stylish_elephants$Internal_Model$reduceStyles,
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Set$empty,
							_1: {
								ctor: '::',
								_0: _mdgriffith$stylish_elephants$Internal_Model$renderFocusStyle(_p234.focus),
								_1: {ctor: '[]'}
							}
						},
						styleChildren));
				var renderedChildren = function () {
					var _p230 = A2(_elm_lang$core$Maybe$map, _mdgriffith$stylish_elephants$Internal_Model$renderNearbyGroupAbsolute, rendered.nearbys);
					if (_p230.ctor === 'Nothing') {
						var _p231 = htmlChildren;
						if (_p231.ctor === 'Keyed') {
							return _mdgriffith$stylish_elephants$Internal_Model$Keyed(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'dynamic-stylesheet',
										_1: A2(_mdgriffith$stylish_elephants$Internal_Model$toStyleSheet, _p234, styles)
									},
									_1: _p231._0
								});
						} else {
							return _mdgriffith$stylish_elephants$Internal_Model$Unkeyed(
								{
									ctor: '::',
									_0: A2(_mdgriffith$stylish_elephants$Internal_Model$toStyleSheet, _p234, styles),
									_1: _p231._0
								});
						}
					} else {
						var _p233 = _p230._0;
						var _p232 = htmlChildren;
						if (_p232.ctor === 'Keyed') {
							return _mdgriffith$stylish_elephants$Internal_Model$Keyed(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'dynamic-stylesheet',
										_1: A2(_mdgriffith$stylish_elephants$Internal_Model$toStyleSheet, _p234, styles)
									},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'nearby-elements-pls', _1: _p233},
										_1: _p232._0
									}
								});
						} else {
							return _mdgriffith$stylish_elephants$Internal_Model$Unkeyed(
								{
									ctor: '::',
									_0: A2(_mdgriffith$stylish_elephants$Internal_Model$toStyleSheet, _p234, styles),
									_1: {ctor: '::', _0: _p233, _1: _p232._0}
								});
						}
					}
				}();
				return _mdgriffith$stylish_elephants$Internal_Model$Unstyled(
					A3(_mdgriffith$stylish_elephants$Internal_Model$renderNode, rendered, renderedChildren, _elm_lang$core$Maybe$Nothing));
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$element = F5(
	function (embedMode, context, node, attributes, children) {
		return A4(
			_mdgriffith$stylish_elephants$Internal_Model$asElement,
			embedMode,
			children,
			context,
			_mdgriffith$stylish_elephants$Internal_Model$finalize(
				A3(
					_elm_lang$core$List$foldr,
					_mdgriffith$stylish_elephants$Internal_Model$gatherAttributes,
					_mdgriffith$stylish_elephants$Internal_Model$initGathered(node),
					{
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Internal_Model$contextClasses(context),
						_1: attributes
					})));
	});
var _mdgriffith$stylish_elephants$Internal_Model$WithVirtualCss = {ctor: 'WithVirtualCss'};
var _mdgriffith$stylish_elephants$Internal_Model$NoStaticStyleSheet = {ctor: 'NoStaticStyleSheet'};
var _mdgriffith$stylish_elephants$Internal_Model$Layout = {ctor: 'Layout'};
var _mdgriffith$stylish_elephants$Internal_Model$Viewport = {ctor: 'Viewport'};
var _mdgriffith$stylish_elephants$Internal_Model$ForceHover = {ctor: 'ForceHover'};
var _mdgriffith$stylish_elephants$Internal_Model$AllowHover = {ctor: 'AllowHover'};
var _mdgriffith$stylish_elephants$Internal_Model$embed = F2(
	function (fn, a) {
		var _p235 = fn(a);
		switch (_p235.ctor) {
			case 'Unstyled':
				return _p235._0;
			case 'Styled':
				var _p236 = _p235._0;
				return _p236.html(
					_elm_lang$core$Maybe$Just(
						A2(
							_mdgriffith$stylish_elephants$Internal_Model$toStyleSheetString,
							{
								hover: _mdgriffith$stylish_elephants$Internal_Model$AllowHover,
								focus: {borderColor: _elm_lang$core$Maybe$Nothing, shadow: _elm_lang$core$Maybe$Nothing, backgroundColor: _elm_lang$core$Maybe$Nothing},
								mode: _mdgriffith$stylish_elephants$Internal_Model$Layout
							},
							_p236.styles)));
			case 'Text':
				return _elm_lang$core$Basics$always(
					_elm_lang$html$Html$text(_p235._0));
			default:
				return _elm_lang$core$Basics$always(
					_elm_lang$html$Html$text(''));
		}
	});
var _mdgriffith$stylish_elephants$Internal_Model$optionsToRecord = function (options) {
	var finalize = function (record) {
		return {
			hover: function () {
				var _p237 = record.hover;
				if (_p237.ctor === 'Nothing') {
					return _mdgriffith$stylish_elephants$Internal_Model$AllowHover;
				} else {
					return _p237._0;
				}
			}(),
			focus: function () {
				var _p238 = record.focus;
				if (_p238.ctor === 'Nothing') {
					return _mdgriffith$stylish_elephants$Internal_Model$focusDefaultStyle;
				} else {
					return _p238._0;
				}
			}(),
			mode: function () {
				var _p239 = record.mode;
				if (_p239.ctor === 'Nothing') {
					return _mdgriffith$stylish_elephants$Internal_Model$Layout;
				} else {
					return _p239._0;
				}
			}()
		};
	};
	var combine = F2(
		function (opt, record) {
			var _p240 = opt;
			switch (_p240.ctor) {
				case 'HoverOption':
					var _p241 = record.hover;
					if (_p241.ctor === 'Nothing') {
						return _elm_lang$core$Native_Utils.update(
							record,
							{
								hover: _elm_lang$core$Maybe$Just(_p240._0)
							});
					} else {
						return record;
					}
				case 'FocusStyleOption':
					var _p242 = record.focus;
					if (_p242.ctor === 'Nothing') {
						return _elm_lang$core$Native_Utils.update(
							record,
							{
								focus: _elm_lang$core$Maybe$Just(_p240._0)
							});
					} else {
						return record;
					}
				default:
					var _p243 = record.mode;
					if (_p243.ctor === 'Nothing') {
						return _elm_lang$core$Native_Utils.update(
							record,
							{
								mode: _elm_lang$core$Maybe$Just(_p240._0)
							});
					} else {
						return record;
					}
			}
		});
	return finalize(
		A3(
			_elm_lang$core$List$foldr,
			combine,
			{hover: _elm_lang$core$Maybe$Nothing, focus: _elm_lang$core$Maybe$Nothing, mode: _elm_lang$core$Maybe$Nothing},
			options));
};
var _mdgriffith$stylish_elephants$Internal_Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = _mdgriffith$stylish_elephants$Internal_Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _p244 = options.mode;
			if (_p244.ctor === 'NoStaticStyleSheet') {
				return _mdgriffith$stylish_elephants$Internal_Model$OnlyDynamic(options);
			} else {
				return _mdgriffith$stylish_elephants$Internal_Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			_mdgriffith$stylish_elephants$Internal_Model$toHtml,
			options,
			A5(
				_mdgriffith$stylish_elephants$Internal_Model$element,
				embedStyle,
				_mdgriffith$stylish_elephants$Internal_Model$asEl,
				_elm_lang$core$Maybe$Nothing,
				attributes,
				_mdgriffith$stylish_elephants$Internal_Model$Unkeyed(
					{
						ctor: '::',
						_0: child,
						_1: {ctor: '[]'}
					})));
	});
var _mdgriffith$stylish_elephants$Internal_Model$NoHover = {ctor: 'NoHover'};
var _mdgriffith$stylish_elephants$Internal_Model$RenderModeOption = function (a) {
	return {ctor: 'RenderModeOption', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$FocusStyleOption = function (a) {
	return {ctor: 'FocusStyleOption', _0: a};
};
var _mdgriffith$stylish_elephants$Internal_Model$HoverOption = function (a) {
	return {ctor: 'HoverOption', _0: a};
};

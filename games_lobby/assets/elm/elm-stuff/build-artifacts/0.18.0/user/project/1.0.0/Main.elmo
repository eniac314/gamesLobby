var _user$project$Main$encodePlayer = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'username',
				_1: _elm_lang$core$Json_Encode$string(_p1.username)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'joined_at',
					_1: _elm_lang$core$Json_Encode$string(_p1.onlineAt)
				},
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$decodeDate = A2(
	_elm_lang$core$Json_Decode$map,
	function (v) {
		return _elm_lang$core$Date$fromTime(v);
	},
	_elm_lang$core$Json_Decode$float);
var _user$project$Main$encodeChatMessage = function (_p2) {
	var _p3 = _p2;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'time_stamp',
				_1: _elm_lang$core$Json_Encode$float(
					_elm_lang$core$Date$toTime(_p3.timeStamp))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'author',
					_1: _user$project$Main$encodePlayer(_p3.author)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'message',
						_1: _elm_lang$core$Json_Encode$string(_p3.message)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$debugView = function (model) {
	return A2(
		_mdgriffith$stylish_elephants$Element$column,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_mdgriffith$stylish_elephants$Element$paragraph,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Element$text(
						_elm_lang$core$Basics$toString(model.playerInfo)),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_mdgriffith$stylish_elephants$Element$paragraph,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _mdgriffith$stylish_elephants$Element$text(model.wsUrl),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$chatLogView = function (model) {
	var messageView = function (_p4) {
		var _p5 = _p4;
		return A2(
			_mdgriffith$stylish_elephants$Element$row,
			{
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Element$spacing(20),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _mdgriffith$stylish_elephants$Element$text(_p5.author.username),
				_1: {
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Element$text(_p5.message),
					_1: {ctor: '[]'}
				}
			});
	};
	return A2(
		_mdgriffith$stylish_elephants$Element$column,
		{
			ctor: '::',
			_0: _mdgriffith$stylish_elephants$Element$spacing(10),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, messageView, model.chatLog));
};
var _user$project$Main$listPlayers = function (model) {
	var players = _elm_lang$core$Dict$keys(model.presences);
	var playerView = F2(
		function (n, player) {
			return A2(
				_mdgriffith$stylish_elephants$Element$el,
				{
					ctor: '::',
					_0: _mdgriffith$stylish_elephants$Element$padding(5),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.eq(
							A2(_elm_lang$core$Basics_ops['%'], n, 2),
							0) ? _mdgriffith$stylish_elephants$Element_Background$color(_elm_lang$core$Color$grey) : _mdgriffith$stylish_elephants$Element_Background$color(_elm_lang$core$Color$white),
						_1: {ctor: '[]'}
					}
				},
				_mdgriffith$stylish_elephants$Element$text(player));
		});
	return A2(
		_mdgriffith$stylish_elephants$Element$column,
		{
			ctor: '::',
			_0: _mdgriffith$stylish_elephants$Element$spacing(15),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$indexedMap, playerView, players));
};
var _user$project$Main$initPhoenixChannel = function (topic) {
	return _fbonetti$elm_phoenix_socket$Phoenix_Channel$init(topic);
};
var _user$project$Main$Flags = F3(
	function (a, b, c) {
		return {authToken: a, authSalt: b, wsUrl: c};
	});
var _user$project$Main$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {wsUrl: a, authToken: b, authSalt: c, phxSocket: d, playerInfo: e, log: f, errors: g, presences: h, chatMessageInput: i, chatLog: j, chatMessageBoxFocused: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Main$ChatMessage = F3(
	function (a, b, c) {
		return {timeStamp: a, author: b, message: c};
	});
var _user$project$Main$Player = F2(
	function (a, b) {
		return {onlineAt: a, username: b};
	});
var _user$project$Main$defPlayer = A2(_user$project$Main$Player, '', '');
var _user$project$Main$decodePlayerInfo = function (jsonVal) {
	return A2(
		_elm_lang$core$Result$map,
		function (name) {
			return _elm_lang$core$Native_Utils.update(
				_user$project$Main$defPlayer,
				{username: name});
		},
		A2(
			_elm_lang$core$Json_Decode$decodeValue,
			A2(_elm_lang$core$Json_Decode$field, 'username', _elm_lang$core$Json_Decode$string),
			jsonVal));
};
var _user$project$Main$playerDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$Main$Player,
	A2(_elm_lang$core$Json_Decode$field, 'joined_at', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'username', _elm_lang$core$Json_Decode$string));
var _user$project$Main$decodeChatMessage = function (jsonVal) {
	return A2(
		_elm_lang$core$Json_Decode$decodeValue,
		A4(
			_elm_lang$core$Json_Decode$map3,
			_user$project$Main$ChatMessage,
			A2(_elm_lang$core$Json_Decode$field, 'time_stamp', _user$project$Main$decodeDate),
			A2(_elm_lang$core$Json_Decode$field, 'author', _user$project$Main$playerDecoder),
			A2(_elm_lang$core$Json_Decode$field, 'message', _elm_lang$core$Json_Decode$string)),
		jsonVal);
};
var _user$project$Main$decodePresenceState = function (jsonVal) {
	return A2(
		_elm_lang$core$Json_Decode$decodeValue,
		_fbonetti$elm_phoenix_socket$Phoenix_Presence$presenceStateDecoder(_user$project$Main$playerDecoder),
		jsonVal);
};
var _user$project$Main$decodePresenceDiff = function (jsonVal) {
	return A2(
		_elm_lang$core$Json_Decode$decodeValue,
		_fbonetti$elm_phoenix_socket$Phoenix_Presence$presenceDiffDecoder(_user$project$Main$playerDecoder),
		jsonVal);
};
var _user$project$Main$RequestDate = function (a) {
	return {ctor: 'RequestDate', _0: a};
};
var _user$project$Main$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Main$UnfocusChatMessageBox = {ctor: 'UnfocusChatMessageBox'};
var _user$project$Main$FocusChatMessageBox = {ctor: 'FocusChatMessageBox'};
var _user$project$Main$ReceiveChatMessage = function (a) {
	return {ctor: 'ReceiveChatMessage', _0: a};
};
var _user$project$Main$SendChatMessage = function (a) {
	return {ctor: 'SendChatMessage', _0: a};
};
var _user$project$Main$ChatMessageInput = function (a) {
	return {ctor: 'ChatMessageInput', _0: a};
};
var _user$project$Main$ServerError = function (a) {
	return {ctor: 'ServerError', _0: a};
};
var _user$project$Main$ServerMsg = function (a) {
	return {ctor: 'ServerMsg', _0: a};
};
var _user$project$Main$ReceivePresenceDiff = function (a) {
	return {ctor: 'ReceivePresenceDiff', _0: a};
};
var _user$project$Main$ReceivePresenceState = function (a) {
	return {ctor: 'ReceivePresenceState', _0: a};
};
var _user$project$Main$ReceivePlayerInfo = function (a) {
	return {ctor: 'ReceivePlayerInfo', _0: a};
};
var _user$project$Main$initialSocket = function (flags) {
	var wsUrlWithAuth = A2(
		_elm_lang$core$Basics_ops['++'],
		flags.wsUrl,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'?token=',
			A2(
				_elm_lang$core$Basics_ops['++'],
				flags.authToken,
				A2(_elm_lang$core$Basics_ops['++'], '&salt=', flags.authSalt))));
	return _fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$withoutHeartbeat(
			A4(
				_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
				'new_chat_message',
				'lobby:chat',
				_user$project$Main$ReceiveChatMessage,
				A4(
					_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
					'presence_diff',
					'lobby:chat',
					_user$project$Main$ReceivePresenceDiff,
					A4(
						_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
						'presence_state',
						'lobby:chat',
						_user$project$Main$ReceivePresenceState,
						A4(
							_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
							'greetings',
							'lobby:chat',
							_user$project$Main$ReceivePlayerInfo,
							_fbonetti$elm_phoenix_socket$Phoenix_Socket$init(wsUrlWithAuth)))))));
};
var _user$project$Main$init = function (flags) {
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		{
			wsUrl: flags.wsUrl,
			authToken: flags.authToken,
			authSalt: flags.authSalt,
			phxSocket: _user$project$Main$initialSocket(flags),
			playerInfo: _user$project$Main$defPlayer,
			log: '',
			errors: '',
			presences: _elm_lang$core$Dict$empty,
			chatMessageInput: '',
			chatLog: {ctor: '[]'},
			chatMessageBoxFocused: false
		},
		{ctor: '[]'});
};
var _user$project$Main$JoinChannel = {ctor: 'JoinChannel'};
var _user$project$Main$view = function (model) {
	return A2(
		_mdgriffith$stylish_elephants$Element$layout,
		{
			ctor: '::',
			_0: _mdgriffith$stylish_elephants$Element$padding(15),
			_1: {ctor: '[]'}
		},
		A2(
			_mdgriffith$stylish_elephants$Element$column,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _user$project$Main$listPlayers(model),
				_1: {
					ctor: '::',
					_0: A2(
						_mdgriffith$stylish_elephants$Element_Input$button,
						{
							ctor: '::',
							_0: _mdgriffith$stylish_elephants$Element_Background$color(_elm_lang$core$Color$lightBlue),
							_1: {
								ctor: '::',
								_0: _mdgriffith$stylish_elephants$Element$padding(10),
								_1: {ctor: '[]'}
							}
						},
						{
							onPress: _elm_lang$core$Maybe$Just(_user$project$Main$JoinChannel),
							label: _mdgriffith$stylish_elephants$Element$text('Join channel!')
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_mdgriffith$stylish_elephants$Element$row,
							{
								ctor: '::',
								_0: _mdgriffith$stylish_elephants$Element$spacing(10),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_mdgriffith$stylish_elephants$Element_Input$text,
									{
										ctor: '::',
										_0: _mdgriffith$stylish_elephants$Element$width(
											_mdgriffith$stylish_elephants$Element$px(300)),
										_1: {
											ctor: '::',
											_0: _mdgriffith$stylish_elephants$Element_Events$onFocus(_user$project$Main$FocusChatMessageBox),
											_1: {
												ctor: '::',
												_0: _mdgriffith$stylish_elephants$Element_Events$onLoseFocus(_user$project$Main$UnfocusChatMessageBox),
												_1: {ctor: '[]'}
											}
										}
									},
									{
										onChange: _elm_lang$core$Maybe$Just(_user$project$Main$ChatMessageInput),
										text: model.chatMessageInput,
										placeholder: _elm_lang$core$Maybe$Nothing,
										label: A2(
											_mdgriffith$stylish_elephants$Element_Input$labelAbove,
											{ctor: '[]'},
											_mdgriffith$stylish_elephants$Element$text('message: '))
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_mdgriffith$stylish_elephants$Element_Input$button,
										{
											ctor: '::',
											_0: _mdgriffith$stylish_elephants$Element_Background$color(_elm_lang$core$Color$lightBlue),
											_1: {
												ctor: '::',
												_0: _mdgriffith$stylish_elephants$Element$padding(10),
												_1: {
													ctor: '::',
													_0: _mdgriffith$stylish_elephants$Element$alignBottom,
													_1: {ctor: '[]'}
												}
											}
										},
										{
											onPress: _elm_lang$core$Maybe$Just(
												_user$project$Main$RequestDate(_user$project$Main$SendChatMessage)),
											label: _mdgriffith$stylish_elephants$Element$text('Send')
										}),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Main$chatLogView(model),
							_1: {ctor: '[]'}
						}
					}
				}
			}));
};
var _user$project$Main$PhoenixMsg = function (a) {
	return {ctor: 'PhoenixMsg', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p6 = msg;
			switch (_p6.ctor) {
				case 'ServerMsg':
					var _p7 = A2(
						_elm_lang$core$Json_Decode$decodeValue,
						A2(_elm_lang$core$Json_Decode$field, 'content', _elm_lang$core$Json_Decode$string),
						_p6._0);
					if (_p7.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{log: _p7._0}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{errors: _p7._0}),
							{ctor: '[]'});
					}
				case 'ServerError':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				case 'ReceivePlayerInfo':
					var _p8 = _user$project$Main$decodePlayerInfo(_p6._0);
					if (_p8.ctor === 'Ok') {
						var currPlInf = model.playerInfo;
						var newPlInf = _elm_lang$core$Native_Utils.update(
							currPlInf,
							{username: _p8._0.username});
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{playerInfo: newPlInf}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{errors: _p8._0}),
							{ctor: '[]'});
					}
				case 'ReceivePresenceState':
					var presences = A2(
						_elm_lang$core$Result$map,
						_fbonetti$elm_phoenix_socket$Phoenix_Presence$syncState(model.presences),
						_user$project$Main$decodePresenceState(_p6._0));
					var _p9 = presences;
					if (_p9.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{presences: _p9._0}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{errors: _p9._0}),
							{ctor: '[]'});
					}
				case 'ReceivePresenceDiff':
					var presences = A2(
						_elm_lang$core$Result$map,
						function (diff) {
							return A2(_fbonetti$elm_phoenix_socket$Phoenix_Presence$syncDiff, diff, model.presences);
						},
						_user$project$Main$decodePresenceDiff(_p6._0));
					var _p10 = presences;
					if (_p10.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{presences: _p10._0}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{errors: _p10._0}),
							{ctor: '[]'});
					}
				case 'JoinChannel':
					var channel = _user$project$Main$initPhoenixChannel('lobby:chat');
					var _p11 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, channel, model.phxSocket);
					var newSocket = _p11._0;
					var phxCmd = _p11._1;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{phxSocket: newSocket}),
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd),
							_1: {ctor: '[]'}
						});
				case 'PhoenixMsg':
					var _p12 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p6._0, model.phxSocket);
					var newSocket = _p12._0;
					var phxCmd = _p12._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{phxSocket: newSocket}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd)
					};
				case 'ChatMessageInput':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{chatMessageInput: _p6._0}),
						{ctor: '[]'});
				case 'SendChatMessage':
					var payload = _user$project$Main$encodeChatMessage(
						{message: model.chatMessageInput, author: model.playerInfo, timeStamp: _p6._0});
					var pushMsg = A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$onError,
						_user$project$Main$ServerError,
						A2(
							_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
							payload,
							A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'new_chat_message', 'lobby:chat')));
					var _p13 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, pushMsg, model.phxSocket);
					var newSocket = _p13._0;
					var phxCmd = _p13._1;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{log: 'message sent', phxSocket: newSocket, chatMessageInput: ''}),
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$PhoenixMsg, phxCmd),
							_1: {ctor: '[]'}
						});
				case 'ReceiveChatMessage':
					var _p14 = _user$project$Main$decodeChatMessage(_p6._0);
					if (_p14.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									chatLog: {ctor: '::', _0: _p14._0, _1: model.chatLog}
								}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{errors: _p14._0}),
							{ctor: '[]'});
					}
				case 'FocusChatMessageBox':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{chatMessageBoxFocused: true}),
						{ctor: '[]'});
				case 'UnfocusChatMessageBox':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{chatMessageBoxFocused: false}),
						{ctor: '[]'});
				case 'KeyDown':
					if (_elm_lang$core$Native_Utils.eq(_p6._0, 13) && model.chatMessageBoxFocused) {
						var _v9 = _user$project$Main$RequestDate(_user$project$Main$SendChatMessage),
							_v10 = model;
						msg = _v9;
						model = _v10;
						continue update;
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				case 'RequestDate':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Task$perform, _p6._0, _elm_lang$core$Date$now),
							_1: {ctor: '[]'}
						});
				default:
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
			}
		}
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.phxSocket, _user$project$Main$PhoenixMsg),
			_1: {
				ctor: '::',
				_0: _elm_lang$keyboard$Keyboard$downs(_user$project$Main$KeyDown),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (authSalt) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (authToken) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (wsUrl) {
							return _elm_lang$core$Json_Decode$succeed(
								{authSalt: authSalt, authToken: authToken, wsUrl: wsUrl});
						},
						A2(_elm_lang$core$Json_Decode$field, 'wsUrl', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'authToken', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'authSalt', _elm_lang$core$Json_Decode$string)));
var _user$project$Main$Default = {ctor: 'Default'};

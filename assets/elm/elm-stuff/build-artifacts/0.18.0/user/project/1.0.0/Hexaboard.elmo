var _user$project$Hexaboard$pushGameMsg = F4(
	function (model, topic, mbPayload, mbOkHandler) {
		var okHandler = A2(_elm_lang$core$Maybe$withDefault, _user$project$Hexaboard_HexaboardTypes$DropJson, mbOkHandler);
		var payload = A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Json_Encode$object(
				{ctor: '[]'}),
			mbPayload);
		var msg = A2(
			_fbonetti$elm_phoenix_socket$Phoenix_Push$onOk,
			okHandler,
			A2(
				_fbonetti$elm_phoenix_socket$Phoenix_Push$onError,
				_user$project$Hexaboard_HexaboardTypes$ServerError,
				A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
					payload,
					A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$init,
						topic,
						A2(_elm_lang$core$Basics_ops['++'], 'hexaboard:game:', model.gameId)))));
		var _p0 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, msg, model.phxSocket);
		var newSocket = _p0._0;
		var phxCmd = _p0._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{phxSocket: newSocket}),
			_1: phxCmd
		};
	});
var _user$project$Hexaboard$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$window$Window$resizes(_user$project$Hexaboard_HexaboardTypes$Resizes),
			_1: {
				ctor: '::',
				_0: A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.phxSocket, _user$project$Hexaboard_HexaboardTypes$PhoenixMsg),
				_1: {
					ctor: '::',
					_0: _elm_lang$keyboard$Keyboard$downs(_user$project$Hexaboard_HexaboardTypes$KeyDown),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Hexaboard$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p1 = msg;
			switch (_p1.ctor) {
				case 'PhoenixMsg':
					var _p2 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p1._0, model.phxSocket);
					var newSocket = _p2._0;
					var phxCmd = _p2._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{phxSocket: newSocket}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Hexaboard_HexaboardTypes$PhoenixMsg, phxCmd)
					};
				case 'ReceivePlayerInfo':
					var _p3 = _user$project$Hexaboard_HexaboardComs$decodePlayerInfo(_p1._0);
					if (_p3.ctor === 'Ok') {
						var currPlInf = model.playerInfo;
						var newPlInf = _elm_lang$core$Native_Utils.update(
							currPlInf,
							{username: _p3._0.username});
						var newModel = _elm_lang$core$Native_Utils.update(
							model,
							{playerInfo: newPlInf});
						var _v2 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerMsg(
								A2(_elm_lang$core$Basics_ops['++'], 'connexion established to game: ', model.gameId))),
							_v3 = newModel;
						msg = _v2;
						model = _v3;
						continue update;
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				case 'FocusChatMessageBox':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{chatMessageBoxFocused: true}),
						{ctor: '[]'});
				case 'UnfocusChatMessageBox':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{chatMessageBoxFocused: false}),
						{ctor: '[]'});
				case 'ChatMessageInput':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{chatMessageInput: _p1._0}),
						{ctor: '[]'});
				case 'ReceivePresenceState':
					var presences = A2(
						_elm_lang$core$Result$map,
						function (state) {
							return A2(_fbonetti$elm_phoenix_socket$Phoenix_Presence$syncState, state, model.presences);
						},
						_user$project$Hexaboard_HexaboardComs$decodePresenceState(_p1._0));
					var _p4 = presences;
					if (_p4.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{presences: _p4._0}),
							{ctor: '[]'});
					} else {
						var _v5 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'receive presence_state: ', _p4._0))),
							_v6 = model;
						msg = _v5;
						model = _v6;
						continue update;
					}
				case 'ReceivePresenceDiff':
					var presences = A2(
						_elm_lang$core$Result$map,
						function (diff) {
							return A2(_fbonetti$elm_phoenix_socket$Phoenix_Presence$syncDiff, diff, model.presences);
						},
						_user$project$Hexaboard_HexaboardComs$decodePresenceDiff(_p1._0));
					var _p5 = presences;
					if (_p5.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{presences: _p5._0}),
							{ctor: '[]'});
					} else {
						var _v8 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'receive presence_diff: ', _p5._0))),
							_v9 = model;
						msg = _v8;
						model = _v9;
						continue update;
					}
				case 'SendChatMessage':
					var payload = _user$project$Hexaboard_HexaboardComs$encodeChatMessage(
						{message: model.chatMessageInput, author: model.playerInfo, timeStamp: _p1._0});
					var pushMsg = A2(
						_fbonetti$elm_phoenix_socket$Phoenix_Push$onError,
						_user$project$Hexaboard_HexaboardTypes$ServerError,
						A2(
							_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
							payload,
							A2(
								_fbonetti$elm_phoenix_socket$Phoenix_Push$init,
								'new_chat_message',
								A2(_elm_lang$core$Basics_ops['++'], 'hexaboard:chat:', model.gameId))));
					var _p6 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, pushMsg, model.phxSocket);
					var newSocket = _p6._0;
					var phxCmd = _p6._1;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{phxSocket: newSocket, chatMessageInput: ''}),
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Hexaboard_HexaboardTypes$PhoenixMsg, phxCmd),
							_1: {ctor: '[]'}
						});
				case 'RequestGameState':
					var _p7 = _user$project$Hexaboard_HexaboardComs$decodePlayerInfo(_p1._0);
					if (_p7.ctor === 'Ok') {
						var _p8 = A4(_user$project$Hexaboard$pushGameMsg, model, 'requesting_gamestate', _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
						var newModel = _p8._0;
						var phxCmd = _p8._1;
						var currPlInf = model.playerInfo;
						var newPlInf = _elm_lang$core$Native_Utils.update(
							currPlInf,
							{username: _p7._0.username});
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								newModel,
								{playerInfo: newPlInf}),
							{
								ctor: '::',
								_0: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Hexaboard_HexaboardTypes$PhoenixMsg, phxCmd),
								_1: {ctor: '[]'}
							});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				case 'ReceiveChatMessage':
					var _p9 = _user$project$Hexaboard_HexaboardComs$decodeChatMessage(_p1._0);
					if (_p9.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									consoleLog: {ctor: '::', _0: _p9._0, _1: model.consoleLog}
								}),
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Task$attempt,
									_user$project$Hexaboard_HexaboardTypes$DropRes,
									_elm_lang$dom$Dom_Scroll$toBottom('chatLogContainer')),
								_1: {ctor: '[]'}
							});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				case 'UpdateChatLog':
					var _p10 = _user$project$Hexaboard_HexaboardComs$decodeChatHistory(_p1._0);
					if (_p10.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{consoleLog: _p10._0}),
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Task$attempt,
									_user$project$Hexaboard_HexaboardTypes$DropRes,
									_elm_lang$dom$Dom_Scroll$toBottom('chatLogContainer')),
								_1: {ctor: '[]'}
							});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				case 'KeyDown':
					if (_elm_lang$core$Native_Utils.eq(_p1._0, 13) && model.chatMessageBoxFocused) {
						var _v13 = _user$project$Hexaboard_HexaboardTypes$RequestDate(_user$project$Hexaboard_HexaboardTypes$SendChatMessage),
							_v14 = model;
						msg = _v13;
						model = _v14;
						continue update;
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				case 'UpdateGameState':
					var _p11 = A2(_user$project$Hexaboard_HexaboardComs$decodeGameState, model.playerInfo.username, _p1._0);
					if (_p11.ctor === 'Ok') {
						var _p15 = _p11._0.turnSelectionOrder;
						var _p14 = _p11._0.playingOrder;
						var _p13 = _p11._0.id;
						var _p12 = _p11._0.availableTurns;
						var canPlay = A2(
							_elm_lang$core$Maybe$withDefault,
							false,
							A2(
								_elm_lang$core$Maybe$map,
								function (pid) {
									return _elm_lang$core$Native_Utils.eq(pid, _p13);
								},
								_elm_lang$core$List$head(_p14)));
						var canChooseTurn = A2(
							_elm_lang$core$Maybe$withDefault,
							false,
							A2(
								_elm_lang$core$Maybe$map,
								function (pid) {
									return _elm_lang$core$Native_Utils.eq(pid, _p13);
								},
								_elm_lang$core$List$head(_p15)));
						var choice = A2(
							_elm_lang$core$Maybe$map,
							function (v) {
								return {playerId: _p13, value: v};
							},
							_p11._0.piece);
						var gameState = _p11._0.gameOver ? _user$project$Hexaboard_HexaboardTypes$EndGame : ((_elm_lang$core$Native_Utils.eq(
							_p15,
							{ctor: '[]'}) && (_elm_lang$core$Native_Utils.eq(
							_p14,
							{ctor: '[]'}) && _elm_lang$core$Native_Utils.eq(choice, _elm_lang$core$Maybe$Nothing))) ? _user$project$Hexaboard_HexaboardTypes$PieceSelection : ((_elm_lang$core$Native_Utils.eq(
							_p15,
							{ctor: '[]'}) && _elm_lang$core$Native_Utils.eq(
							_p14,
							{ctor: '[]'})) ? _user$project$Hexaboard_HexaboardTypes$WaitingForEndOfPieceSelection : ((!_elm_lang$core$Native_Utils.eq(
							_p12,
							{ctor: '[]'})) ? _user$project$Hexaboard_HexaboardTypes$TurnSelection : (((!canPlay) && ((!_elm_lang$core$Native_Utils.eq(
							_p14,
							{ctor: '[]'})) && (!_elm_lang$core$Native_Utils.eq(choice, _elm_lang$core$Maybe$Nothing)))) ? _user$project$Hexaboard_HexaboardTypes$WaitingForOwnTurn : ((canPlay && (!_elm_lang$core$Native_Utils.eq(
							_p14,
							{ctor: '[]'}))) ? _user$project$Hexaboard_HexaboardTypes$Playing : (((!_elm_lang$core$Native_Utils.eq(
							_p14,
							{ctor: '[]'})) && _elm_lang$core$Native_Utils.eq(choice, _elm_lang$core$Maybe$Nothing)) ? _user$project$Hexaboard_HexaboardTypes$WaitingForEndOfRound : _user$project$Hexaboard_HexaboardTypes$EndGame))))));
						var plInf = model.playerInfo;
						var newModel = _elm_lang$core$Native_Utils.update(
							model,
							{
								board: _p11._0.board,
								deck: _p11._0.deck,
								choice: choice,
								availableTurns: _p12,
								playingOrder: _p14,
								playerInfo: _elm_lang$core$Native_Utils.update(
									plInf,
									{playerId: _p13}),
								canChooseTurn: canChooseTurn,
								gameState: gameState,
								players: _p11._0.players
							});
						var _v16 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddGameMsg('initial game state loaded')),
							_v17 = newModel;
						msg = _v16;
						model = _v17;
						continue update;
					} else {
						var _v18 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'update game state - json error: ', _p11._0))),
							_v19 = model;
						msg = _v18;
						model = _v19;
						continue update;
					}
				case 'PickUpPiece':
					var _p16 = model.gameState;
					if (_p16.ctor === 'PieceSelection') {
						var payload = _elm_lang$core$Maybe$Just(
							_user$project$Hexaboard_HexaboardComs$encodePickedUpPiece(_p1._0));
						var _p17 = A4(_user$project$Hexaboard$pushGameMsg, model, 'set_player_piece', payload, _elm_lang$core$Maybe$Nothing);
						var newModel = _p17._0;
						var phxCmd = _p17._1;
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							newModel,
							{
								ctor: '::',
								_0: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Hexaboard_HexaboardTypes$PhoenixMsg, phxCmd),
								_1: {ctor: '[]'}
							});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				case 'PlayersUpdate':
					var _p18 = A2(
						_elm_lang$core$Json_Decode$decodeValue,
						A2(_elm_lang$core$Json_Decode$field, 'players', _user$project$Hexaboard_HexaboardComs$decodePlayers),
						_p1._0);
					if (_p18.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{players: _p18._0}),
							{ctor: '[]'});
					} else {
						var _v22 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'players update - json error: ', _p18._0))),
							_v23 = model;
						msg = _v22;
						model = _v23;
						continue update;
					}
				case 'PiecePickedUp':
					var _p19 = A2(_user$project$Hexaboard_HexaboardComs$decodePlayer, model.playerInfo.username, _p1._0);
					if (_p19.ctor === 'Ok') {
						var _p20 = _p19._0._1;
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									gameState: _elm_lang$core$Native_Utils.eq(model.gameState, _user$project$Hexaboard_HexaboardTypes$PieceSelection) ? _user$project$Hexaboard_HexaboardTypes$WaitingForEndOfPieceSelection : model.gameState,
									deck: A2(
										_elm_lang$core$List$map,
										function (v) {
											return {value: v, playerId: _p20};
										},
										_p19._0._0),
									choice: A2(
										_elm_lang$core$Maybe$map,
										function (v) {
											return {value: v, playerId: _p20};
										},
										_p19._0._2)
								}),
							{ctor: '[]'});
					} else {
						var _v25 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'pieces all set - json error: ', _p19._0))),
							_v26 = model;
						msg = _v25;
						model = _v26;
						continue update;
					}
				case 'PiecesAllSet':
					var _p21 = _user$project$Hexaboard_HexaboardComs$decodeTurnsInfo(_p1._0);
					if (_p21.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									gameState: _user$project$Hexaboard_HexaboardTypes$TurnSelection,
									availableTurns: _p21._0.availableTurns,
									canChooseTurn: A2(
										_elm_lang$core$Maybe$withDefault,
										false,
										A2(
											_elm_lang$core$Maybe$map,
											function (id) {
												return _elm_lang$core$Native_Utils.eq(id, model.playerInfo.playerId);
											},
											_elm_lang$core$List$head(_p21._0.turnSelectionOrder)))
								}),
							{ctor: '[]'});
					} else {
						var _v28 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'pieces all set - json error: ', _p21._0))),
							_v29 = model;
						msg = _v28;
						model = _v29;
						continue update;
					}
				case 'SelectTurn':
					var payload = _elm_lang$core$Maybe$Just(
						_elm_lang$core$Json_Encode$object(
							{
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'turn',
									_1: _elm_lang$core$Json_Encode$int(_p1._0)
								},
								_1: {ctor: '[]'}
							}));
					var _p22 = A4(_user$project$Hexaboard$pushGameMsg, model, 'turn_selected', payload, _elm_lang$core$Maybe$Nothing);
					var newModel = _p22._0;
					var phxCmd = _p22._1;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							newModel,
							{choosenTurn: _elm_lang$core$Maybe$Nothing}),
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Hexaboard_HexaboardTypes$PhoenixMsg, phxCmd),
							_1: {ctor: '[]'}
						});
				case 'TurnSelected':
					var _p23 = _user$project$Hexaboard_HexaboardComs$decodeTurnsInfo(_p1._0);
					if (_p23.ctor === 'Ok') {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									gameState: _user$project$Hexaboard_HexaboardTypes$TurnSelection,
									availableTurns: _p23._0.availableTurns,
									canChooseTurn: A2(
										_elm_lang$core$Maybe$withDefault,
										false,
										A2(
											_elm_lang$core$Maybe$map,
											function (id) {
												return _elm_lang$core$Native_Utils.eq(id, model.playerInfo.playerId);
											},
											_elm_lang$core$List$head(_p23._0.turnSelectionOrder)))
								}),
							{ctor: '[]'});
					} else {
						var _v31 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'turn selected - json error: ', _p23._0))),
							_v32 = model;
						msg = _v31;
						model = _v32;
						continue update;
					}
				case 'TurnsAllSet':
					var _p24 = _user$project$Hexaboard_HexaboardComs$decodeTurnsInfo(_p1._0);
					if (_p24.ctor === 'Ok') {
						var _p25 = _p24._0.playingOrder;
						var canPlay = A2(
							_elm_lang$core$Maybe$withDefault,
							false,
							A2(
								_elm_lang$core$Maybe$map,
								function (id) {
									return _elm_lang$core$Native_Utils.eq(id, model.playerInfo.playerId);
								},
								_elm_lang$core$List$head(_p25)));
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									gameState: canPlay ? _user$project$Hexaboard_HexaboardTypes$Playing : _user$project$Hexaboard_HexaboardTypes$WaitingForOwnTurn,
									availableTurns: {ctor: '[]'},
									playingOrder: _p25,
									canChooseTurn: false
								}),
							{ctor: '[]'});
					} else {
						var _v34 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'turns all set - json error: ', _p24._0))),
							_v35 = model;
						msg = _v34;
						model = _v35;
						continue update;
					}
				case 'PutDownPiece':
					var _p26 = model.gameState;
					if (_p26.ctor === 'Playing') {
						var payload = _elm_lang$core$Maybe$Just(
							_elm_lang$core$Json_Encode$object(
								{
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'player_id',
										_1: _elm_lang$core$Json_Encode$int(model.playerInfo.playerId)
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'pos_x',
											_1: _elm_lang$core$Json_Encode$int(_p1._0._0)
										},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'pos_y',
												_1: _elm_lang$core$Json_Encode$int(_p1._0._1)
											},
											_1: {ctor: '[]'}
										}
									}
								}));
						var _p27 = A4(_user$project$Hexaboard$pushGameMsg, model, 'put_down_piece', payload, _elm_lang$core$Maybe$Nothing);
						var newModel = _p27._0;
						var phxCmd = _p27._1;
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								newModel,
								{choice: _elm_lang$core$Maybe$Nothing, gameState: _user$project$Hexaboard_HexaboardTypes$WaitingForEndOfRound}),
							{
								ctor: '::',
								_0: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Hexaboard_HexaboardTypes$PhoenixMsg, phxCmd),
								_1: {ctor: '[]'}
							});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				case 'PieceDown':
					var _p28 = A2(_user$project$Hexaboard_HexaboardComs$decodePieceDown, model.playerInfo.username, _p1._0);
					if (_p28.ctor === 'Ok') {
						var _p29 = _p28._0.playingOrder;
						var canPlay = A2(
							_elm_lang$core$Maybe$withDefault,
							false,
							A2(
								_elm_lang$core$Maybe$map,
								function (id) {
									return _elm_lang$core$Native_Utils.eq(id, model.playerInfo.playerId);
								},
								_elm_lang$core$List$head(_p29)));
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									board: _p28._0.board,
									playingOrder: _p29,
									players: _p28._0.players,
									gameState: canPlay ? _user$project$Hexaboard_HexaboardTypes$Playing : _user$project$Hexaboard_HexaboardTypes$WaitingForEndOfRound
								}),
							{ctor: '[]'});
					} else {
						var _v38 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'piece down - json error: ', _p28._0))),
							_v39 = model;
						msg = _v38;
						model = _v39;
						continue update;
					}
				case 'RoundOver':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								gameState: _user$project$Hexaboard_HexaboardTypes$PieceSelection,
								choice: _elm_lang$core$Maybe$Nothing,
								canChooseTurn: false,
								choosenTurn: _elm_lang$core$Maybe$Nothing,
								availableTurns: {ctor: '[]'},
								playingOrder: {ctor: '[]'}
							}),
						{ctor: '[]'});
				case 'GameOver':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{gameState: _user$project$Hexaboard_HexaboardTypes$EndGame}),
						{ctor: '[]'});
				case 'RequestDate':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{
							ctor: '::',
							_0: A2(_elm_lang$core$Task$perform, _p1._0, _elm_lang$core$Date$now),
							_1: {ctor: '[]'}
						});
				case 'HideHints':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{displayHints: false}),
						{ctor: '[]'});
				case 'ShowHints':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{displayHints: true}),
						{ctor: '[]'});
				case 'Resizes':
					var _p30 = _p1._0;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								device: _mdgriffith$stylish_elephants$Element$classifyDevice(_p30),
								winSize: _p30
							}),
						{ctor: '[]'});
				case 'AddServerMsg':
					var sysMsg = {timeStamp: _p1._1, message: _p1._0};
					var newConsoleLog = {
						ctor: '::',
						_0: _user$project$Hexaboard_HexaboardTypes$ServerComMsg(sysMsg),
						_1: model.consoleLog
					};
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{consoleLog: newConsoleLog}),
						{ctor: '[]'});
				case 'AddServerError':
					var sysMsg = {timeStamp: _p1._1, message: _p1._0};
					var newConsoleLog = {
						ctor: '::',
						_0: _user$project$Hexaboard_HexaboardTypes$ServerErrorMsg(sysMsg),
						_1: model.consoleLog
					};
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{consoleLog: newConsoleLog}),
						{ctor: '[]'});
				case 'ServerMsg':
					var _p31 = A2(_elm_lang$core$Json_Decode$decodeValue, _elm_lang$core$Json_Decode$string, _p1._0);
					if (_p31.ctor === 'Ok') {
						var _v41 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerMsg(
								A2(_elm_lang$core$Basics_ops['++'], 'ServerMsg: ', _p31._0))),
							_v42 = model;
						msg = _v41;
						model = _v42;
						continue update;
					} else {
						var _v43 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'ServerMsg: json decoding error: ', _p31._0))),
							_v44 = model;
						msg = _v43;
						model = _v44;
						continue update;
					}
				case 'ServerError':
					var _p32 = A2(_elm_lang$core$Json_Decode$decodeValue, _elm_lang$core$Json_Decode$string, _p1._0);
					if (_p32.ctor === 'Ok') {
						var _v46 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'ServerError: ', _p32._0))),
							_v47 = model;
						msg = _v46;
						model = _v47;
						continue update;
					} else {
						var _v48 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'ServerErr: json decoding error: ', _p32._0))),
							_v49 = model;
						msg = _v48;
						model = _v49;
						continue update;
					}
				case 'AddGameMsg':
					var sysMsg = {timeStamp: _p1._1, message: _p1._0};
					var newConsoleLog = {
						ctor: '::',
						_0: _user$project$Hexaboard_HexaboardTypes$GameMsg(sysMsg),
						_1: model.consoleLog
					};
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{consoleLog: newConsoleLog}),
						{ctor: '[]'});
				case 'DebugJson':
					var _p33 = A2(_user$project$Hexaboard_HexaboardComs$debugJson, _p1._0, _p1._1);
					if (_p33.ctor === 'Ok') {
						var _v51 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerMsg(
								A2(_elm_lang$core$Basics_ops['++'], 'Json value: ', _p33._0))),
							_v52 = model;
						msg = _v51;
						model = _v52;
						continue update;
					} else {
						var _v53 = _user$project$Hexaboard_HexaboardTypes$RequestDate(
							_user$project$Hexaboard_HexaboardTypes$AddServerError(
								A2(_elm_lang$core$Basics_ops['++'], 'Debug json error: ', _p33._0))),
							_v54 = model;
						msg = _v53;
						model = _v54;
						continue update;
					}
				case 'DropRes':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				case 'DropJson':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				default:
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
			}
		}
	});
var _user$project$Hexaboard$initialSocket = function (flags) {
	var gameChannel = A2(_elm_lang$core$Basics_ops['++'], 'hexaboard:game:', flags.gameId);
	var chatChannel = A2(_elm_lang$core$Basics_ops['++'], 'hexaboard:chat:', flags.gameId);
	var wsUrlWithAuth = A2(
		_elm_lang$core$Basics_ops['++'],
		flags.wsUrl,
		A2(
			_elm_lang$core$Basics_ops['++'],
			'?token=',
			A2(
				_elm_lang$core$Basics_ops['++'],
				flags.authToken,
				A2(_elm_lang$core$Basics_ops['++'], '&salt=', flags.authSalt))));
	return _fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
		A4(
			_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
			'game_over',
			gameChannel,
			_user$project$Hexaboard_HexaboardTypes$GameOver,
			A4(
				_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
				'round_over',
				gameChannel,
				_user$project$Hexaboard_HexaboardTypes$RoundOver,
				A4(
					_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
					'piece_down',
					gameChannel,
					_user$project$Hexaboard_HexaboardTypes$PieceDown,
					A4(
						_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
						'turns_all_set',
						gameChannel,
						_user$project$Hexaboard_HexaboardTypes$TurnsAllSet,
						A4(
							_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
							'turn_selected',
							gameChannel,
							_user$project$Hexaboard_HexaboardTypes$TurnSelected,
							A4(
								_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
								'pieces_all_set',
								gameChannel,
								_user$project$Hexaboard_HexaboardTypes$PiecesAllSet,
								A4(
									_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
									'piece_picked_up',
									gameChannel,
									_user$project$Hexaboard_HexaboardTypes$PiecePickedUp,
									A4(
										_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
										'players_update',
										gameChannel,
										_user$project$Hexaboard_HexaboardTypes$PlayersUpdate,
										A4(
											_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
											'game_state',
											gameChannel,
											_user$project$Hexaboard_HexaboardTypes$UpdateGameState,
											A4(
												_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
												'chat_history',
												chatChannel,
												_user$project$Hexaboard_HexaboardTypes$UpdateChatLog,
												A4(
													_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
													'new_chat_message',
													chatChannel,
													_user$project$Hexaboard_HexaboardTypes$ReceiveChatMessage,
													A4(
														_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
														'presence_diff',
														chatChannel,
														_user$project$Hexaboard_HexaboardTypes$ReceivePresenceDiff,
														A4(
															_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
															'presence_state',
															chatChannel,
															_user$project$Hexaboard_HexaboardTypes$ReceivePresenceState,
															A4(
																_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
																'greetings',
																gameChannel,
																_user$project$Hexaboard_HexaboardTypes$RequestGameState,
																A4(
																	_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
																	'greetings',
																	chatChannel,
																	_user$project$Hexaboard_HexaboardTypes$ReceivePlayerInfo,
																	_fbonetti$elm_phoenix_socket$Phoenix_Socket$init(wsUrlWithAuth)))))))))))))))));
};
var _user$project$Hexaboard$initPhoenixChannel = F2(
	function (topic, payload) {
		return A2(
			_fbonetti$elm_phoenix_socket$Phoenix_Channel$withPayload,
			payload,
			_fbonetti$elm_phoenix_socket$Phoenix_Channel$init(topic));
	});
var _user$project$Hexaboard$n = 6;
var _user$project$Hexaboard$init = function (flags) {
	var defWinSize = {height: 768, width: 1024};
	var payload = _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'game_id',
				_1: _elm_lang$core$Json_Encode$string(flags.gameId)
			},
			_1: {ctor: '[]'}
		});
	var hexaboardChat = A2(
		_user$project$Hexaboard$initPhoenixChannel,
		A2(_elm_lang$core$Basics_ops['++'], 'hexaboard:chat:', flags.gameId),
		payload);
	var _p34 = A2(
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$join,
		hexaboardChat,
		_user$project$Hexaboard$initialSocket(flags));
	var newSocket1 = _p34._0;
	var phxCmd1 = _p34._1;
	var hexaboardGame = A2(
		_user$project$Hexaboard$initPhoenixChannel,
		A2(_elm_lang$core$Basics_ops['++'], 'hexaboard:game:', flags.gameId),
		payload);
	var _p35 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, hexaboardGame, newSocket1);
	var newSocket2 = _p35._0;
	var phxCmd2 = _p35._1;
	var phxCmd = _elm_lang$core$Platform_Cmd$batch(
		{
			ctor: '::',
			_0: phxCmd1,
			_1: {
				ctor: '::',
				_0: phxCmd2,
				_1: {ctor: '[]'}
			}
		});
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		{
			wsUrl: flags.wsUrl,
			authToken: flags.authToken,
			authSalt: flags.authSalt,
			gameId: flags.gameId,
			phxSocket: newSocket2,
			playerInfo: _user$project$Hexaboard_HexaboardTypes$defPresPlayer,
			presences: _elm_lang$core$Dict$empty,
			chatMessageInput: '',
			consoleLog: {ctor: '[]'},
			chatMessageBoxFocused: false,
			board: A2(
				_user$project$Hexaboard_Board$boardWithEdge,
				_user$project$Hexaboard$n,
				_user$project$Hexaboard_Board$hexaBoard(_user$project$Hexaboard$n)),
			choice: _elm_lang$core$Maybe$Nothing,
			canChooseTurn: false,
			choosenTurn: _elm_lang$core$Maybe$Nothing,
			availableTurns: {ctor: '[]'},
			playingOrder: {ctor: '[]'},
			players: {ctor: '[]'},
			deck: {ctor: '[]'},
			displayHints: false,
			gameState: _user$project$Hexaboard_HexaboardTypes$PieceSelection,
			device: _mdgriffith$stylish_elephants$Element$classifyDevice(defWinSize),
			winSize: defWinSize
		},
		{
			ctor: '::',
			_0: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Hexaboard_HexaboardTypes$PhoenixMsg, phxCmd),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Task$perform, _user$project$Hexaboard_HexaboardTypes$Resizes, _elm_lang$window$Window$size),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Hexaboard$main = _elm_lang$html$Html$programWithFlags(
	{init: _user$project$Hexaboard$init, view: _user$project$Hexaboard_HexaboardView$view, update: _user$project$Hexaboard$update, subscriptions: _user$project$Hexaboard$subscriptions})(
	A2(
		_elm_lang$core$Json_Decode$andThen,
		function (authSalt) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				function (authToken) {
					return A2(
						_elm_lang$core$Json_Decode$andThen,
						function (gameId) {
							return A2(
								_elm_lang$core$Json_Decode$andThen,
								function (wsUrl) {
									return _elm_lang$core$Json_Decode$succeed(
										{authSalt: authSalt, authToken: authToken, gameId: gameId, wsUrl: wsUrl});
								},
								A2(_elm_lang$core$Json_Decode$field, 'wsUrl', _elm_lang$core$Json_Decode$string));
						},
						A2(_elm_lang$core$Json_Decode$field, 'gameId', _elm_lang$core$Json_Decode$string));
				},
				A2(_elm_lang$core$Json_Decode$field, 'authToken', _elm_lang$core$Json_Decode$string));
		},
		A2(_elm_lang$core$Json_Decode$field, 'authSalt', _elm_lang$core$Json_Decode$string)));

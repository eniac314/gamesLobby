var _user$project$Hexaboard_Board$isEdge = F2(
	function (n, _p0) {
		var _p1 = _p0;
		var _p3 = _p1.yPos;
		var _p2 = _p1.xPos;
		return _elm_lang$core$Native_Utils.eq(_p2, 0) || (_elm_lang$core$Native_Utils.eq(_p3, 0) || (_elm_lang$core$Native_Utils.eq(_p3, 2 * n) || (_elm_lang$core$Native_Utils.eq(_p2, n + _p3) || _elm_lang$core$Native_Utils.eq(_p2 + _p3, 3 * n))));
	});
var _user$project$Hexaboard_Board$boardWithEdge = F2(
	function (n, board) {
		return A2(
			_elm_lang$core$Dict$map,
			F2(
				function (key, cell) {
					return _elm_lang$core$Native_Utils.update(
						cell,
						{
							state: function () {
								if (!A2(_user$project$Hexaboard_Board$isEdge, n, cell)) {
									return cell.state;
								} else {
									if (_elm_lang$core$Native_Utils.eq(cell.yPos, 0)) {
										var percent = ((_elm_lang$core$Basics$toFloat(n) / 2) - _elm_lang$core$Basics$abs(
											(_elm_lang$core$Basics$toFloat(n) / 2) - _elm_lang$core$Basics$toFloat(cell.xPos))) / (_elm_lang$core$Basics$toFloat(n) / 2);
										var color_string = A2(
											_elm_lang$core$Basics_ops['++'],
											'#',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_rtfeldman$hex$Hex$toString(
													_elm_lang$core$Basics$round(percent * 255)),
												A2(
													_elm_lang$core$Basics_ops['++'],
													_rtfeldman$hex$Hex$toString(
														_elm_lang$core$Basics$round(percent * 255)),
													'00')));
										return _user$project$Hexaboard_HexaboardTypes$UnPlayable(
											_user$project$Hexaboard_HexaboardTypes$Rainbow(color_string));
									} else {
										if (_elm_lang$core$Native_Utils.eq(cell.xPos, 0) && (_elm_lang$core$Native_Utils.cmp(cell.yPos, n) < 1)) {
											var percent = ((_elm_lang$core$Basics$toFloat(n) / 2) - _elm_lang$core$Basics$abs(
												(_elm_lang$core$Basics$toFloat(n) / 2) - _elm_lang$core$Basics$toFloat(cell.yPos))) / (_elm_lang$core$Basics$toFloat(n) / 2);
											var color_string = A2(
												_elm_lang$core$Basics_ops['++'],
												'#',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_rtfeldman$hex$Hex$toString(
														_elm_lang$core$Basics$round(percent * 255)),
													A2(
														_elm_lang$core$Basics_ops['++'],
														_rtfeldman$hex$Hex$toString(
															_elm_lang$core$Basics$round(percent * 127)),
														'00')));
											return _user$project$Hexaboard_HexaboardTypes$UnPlayable(
												_user$project$Hexaboard_HexaboardTypes$Rainbow(color_string));
										} else {
											if (_elm_lang$core$Native_Utils.eq(cell.xPos, n + cell.yPos)) {
												var percent = ((_elm_lang$core$Basics$toFloat(n) / 2) - _elm_lang$core$Basics$abs(
													(_elm_lang$core$Basics$toFloat(n) / 2) - _elm_lang$core$Basics$toFloat(cell.yPos))) / (_elm_lang$core$Basics$toFloat(n) / 2);
												var color_string = A2(
													_elm_lang$core$Basics_ops['++'],
													'#00',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_rtfeldman$hex$Hex$toString(
															_elm_lang$core$Basics$round(percent * 255)),
														'00'));
												return _user$project$Hexaboard_HexaboardTypes$UnPlayable(
													_user$project$Hexaboard_HexaboardTypes$Rainbow(color_string));
											} else {
												if (_elm_lang$core$Native_Utils.eq(cell.xPos, 0) && (_elm_lang$core$Native_Utils.cmp(cell.yPos, n) > -1)) {
													var percent = ((_elm_lang$core$Basics$toFloat(n) / 2) - _elm_lang$core$Basics$abs(
														(_elm_lang$core$Basics$toFloat(3 * n) / 2) - _elm_lang$core$Basics$toFloat(cell.yPos))) / (_elm_lang$core$Basics$toFloat(n) / 2);
													var color_string = A2(
														_elm_lang$core$Basics_ops['++'],
														'#',
														A2(
															_elm_lang$core$Basics_ops['++'],
															_rtfeldman$hex$Hex$toString(
																_elm_lang$core$Basics$round(percent * 255)),
															'0000'));
													return _user$project$Hexaboard_HexaboardTypes$UnPlayable(
														_user$project$Hexaboard_HexaboardTypes$Rainbow(color_string));
												} else {
													if (_elm_lang$core$Native_Utils.eq(cell.xPos + cell.yPos, 3 * n)) {
														var percent = ((_elm_lang$core$Basics$toFloat(n) / 2) - _elm_lang$core$Basics$abs(
															(_elm_lang$core$Basics$toFloat(3 * n) / 2) - _elm_lang$core$Basics$toFloat(cell.yPos))) / (_elm_lang$core$Basics$toFloat(n) / 2);
														var color_string = A2(
															_elm_lang$core$Basics_ops['++'],
															'#',
															A2(
																_elm_lang$core$Basics_ops['++'],
																'0000',
																_rtfeldman$hex$Hex$toString(
																	_elm_lang$core$Basics$round(percent * 255))));
														return _user$project$Hexaboard_HexaboardTypes$UnPlayable(
															_user$project$Hexaboard_HexaboardTypes$Rainbow(color_string));
													} else {
														var percent = ((_elm_lang$core$Basics$toFloat(n) / 2) - _elm_lang$core$Basics$abs(
															(_elm_lang$core$Basics$toFloat(n) / 2) - _elm_lang$core$Basics$toFloat(cell.xPos))) / (_elm_lang$core$Basics$toFloat(n) / 2);
														var color_string = A2(
															_elm_lang$core$Basics_ops['++'],
															'#',
															A2(
																_elm_lang$core$Basics_ops['++'],
																_rtfeldman$hex$Hex$toString(
																	_elm_lang$core$Basics$round(percent * 180)),
																A2(
																	_elm_lang$core$Basics_ops['++'],
																	'00',
																	_rtfeldman$hex$Hex$toString(
																		_elm_lang$core$Basics$round(percent * 255)))));
														return _user$project$Hexaboard_HexaboardTypes$UnPlayable(
															_user$project$Hexaboard_HexaboardTypes$Rainbow(color_string));
													}
												}
											}
										}
									}
								}
							}()
						});
				}),
			board);
	});
var _user$project$Hexaboard_Board$hexaBoard = function (n) {
	var makeRowBottom = function (i) {
		return A2(
			_elm_lang$core$List$map,
			function (j) {
				return {ctor: '_Tuple2', _0: j, _1: i};
			},
			A2(_elm_lang$core$List$range, 0, (2 * n) + (n - i)));
	};
	var bottomHalf = A2(
		_elm_lang$core$List$concatMap,
		makeRowBottom,
		A2(_elm_lang$core$List$range, n + 1, 2 * n));
	var makeRowTop = function (i) {
		return A2(
			_elm_lang$core$List$map,
			function (j) {
				return {ctor: '_Tuple2', _0: j, _1: i};
			},
			A2(_elm_lang$core$List$range, 0, n + i));
	};
	var topHalf = A2(
		_elm_lang$core$List$concatMap,
		makeRowTop,
		A2(_elm_lang$core$List$range, 0, n));
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (_p4, res) {
				var _p5 = _p4;
				var _p7 = _p5._1;
				var _p6 = _p5._0;
				return A3(
					_elm_lang$core$Dict$insert,
					{ctor: '_Tuple2', _0: _p6, _1: _p7},
					A3(_user$project$Hexaboard_HexaboardTypes$Cell, _p6, _p7, _user$project$Hexaboard_HexaboardTypes$Empty),
					res);
			}),
		_elm_lang$core$Dict$empty,
		A2(_elm_lang$core$Basics_ops['++'], topHalf, bottomHalf));
};
